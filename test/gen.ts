
import "./gen.css"
export * from "./page.fancy.tsx"; import * as test_page_fancy_tsx from "./page.fancy.tsx";
export * from "./demo.mobile.tsx"; import * as test_demo_mobile_tsx from "./demo.mobile.tsx";
export * from "./page.nav.tsx"; import * as test_page_nav_tsx from "./page.nav.tsx";
export * from "./page.adv.tsx"; import * as test_page_adv_tsx from "./page.adv.tsx";
export * from "./page.root.tsx"; import * as test_page_root_tsx from "./page.root.tsx";
export * from "./page.grid.tsx"; import * as test_page_grid_tsx from "./page.grid.tsx";
export * from "./page.tabs.tsx"; import * as test_page_tabs_tsx from "./page.tabs.tsx";
export * from "./demo.dashboard.tsx"; import * as test_demo_dashboard_tsx from "./demo.dashboard.tsx";
export * from "./page.chart.tsx"; import * as test_page_chart_tsx from "./page.chart.tsx";
export * from "./page.svg.tsx"; import * as test_page_svg_tsx from "./page.svg.tsx";
export * from "./common.tsx"; import * as test_common_tsx from "./common.tsx";
export * from "./NotFound.tsx"; import * as test_NotFound_tsx from "./NotFound.tsx";
export * from "./page.ui.tsx"; import * as test_page_ui_tsx from "./page.ui.tsx";


export const CssTEST = {
    ProductCard: "product-card",
    ProductImage: "product-image",
    ProductInfo: "product-info",
    ProductDescription: "product-description",
    BlogTitle: "blog-title",
    BlogMeta: "blog-meta",
    CodeCard: "CodeCard",
    Light: "light",
    Night: "night",
    LanguageCss: "language-css",
    LanguageJavascript: "language-javascript",
    LanguageJson: "language-json",
    LanguageMarkdown: "language-markdown",
    LineNumbersRows: "line-numbers-rows",
    CommandLine: "command-line",
    CommandLinePrompt: "command-line-prompt",
    LineNumbers: "line-numbers",
    IconGrid: "IconGrid",
    IconItem: "IconItem",
    IconLabel: "IconLabel",
    Box: "box",
    Stepper: "stepper",

    varBoxDomHover: "--box-dom-hover",
    varSvgRingColor: "--svg-ring-color",
    varHelloSpan: "--hello-span",
    varMarkAnimCol: "--mark-anim-col",
    varBoxHello: "--box-hello",
    varBoxHi: "--box-hi",
    varDomDecoration: "--dom-decoration",
    varDomBorder: "--dom-border",
    varSvgRingWidth: "--svg-ring-width",
    varHelloSpanBg: "--hello-span-bg",
    varMarqueeWidth: "--marquee-width",
    varMarkAnimHeight: "--mark-anim-height"

    ,Docs: [
        {
            element: test_page_adv_tsx.MarkdownTest, 
            doc: "Markdown : Simple Markdown renderer  (test/page.adv.tsx)", 
            data: "export function MarkdownTest() {\n  return <Markdown content='\n# Bloom filter \n\n--\n\n1. Hello\n2. Hi\n  3. [Wikipedia](https://en.wikipedia.org/wiki/Bloom_filter)\n\n* [Wikipedia](https://en.wikipedia.org/wiki/Bloom_filter)\n  * Hello\n  * Hi\n    * Sol\n* [mCoding : Bloom Filters](https://www.youtube.com/watch?v=qZNJTh2NEiU)\n* [Number0 : Bloom Filters](https://www.youtube.com/watch?v=eCUm4U3WDpM)\n* [ByteByteGo : Bloom Filters](https://www.youtube.com/watch?v=V3pzxngeLqw)\n* [Spanning Tree : What Are Bloom Filters?](https://www.youtube.com/watch?v=kfFacplFY4Y)\n* [ByteMonk : Bloom Filters](https://www.youtube.com/watch?v=GT0En1dGntY)\n\nBloom filter is a space-efficient probabilistic data structure, that is used to test whether an element is a member of a set. False positive matches are possible, but false negatives are not - in other words, a query returns either \"possibly in set\" or \"definitely not in set\". Elements can be added to the set, but not removed.\n\n## Uses\n\n### Cache filtering {#cache-filtering}\n\nRegular paragraph with an ![inline image](https://shared.cloudflare.steamstatic.com/store_item_assets/steam/apps/1903340/ss_483a27df5072beb3a4650634a764bda750fbcb82.1920x1080.jpg?t=1745509513) in the middle.\n\n[![IMAGE ALT TEXT HERE](https://shared.cloudflare.steamstatic.com/store_item_assets/steam/apps/1903340/ss_483a27df5072beb3a4650634a764bda750fbcb82.1920x1080.jpg?t=1745509513)](https://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)\n\n![Standalone image](https://shared.cloudflare.steamstatic.com/store_item_assets/steam/apps/1903340/ss_483a27df5072beb3a4650634a764bda750fbcb82.1920x1080.jpg?t=1745509513)\n\n* List item with ![embedded image](https://shared.cloudflare.steamstatic.com/store_item_assets/steam/apps/1903340/ss_483a27df5072beb3a4650634a764bda750fbcb82.1920x1080.jpg?t=1745509513) inside it\n  * Nested list with image ![nested](https://shared.cloudflare.steamstatic.com/store_item_assets/steam/apps/1903340/ss_483a27df5072beb3a4650634a764bda750fbcb82.1920x1080.jpg?t=1745509513)\n\n<iframe width=\"951\" height=\"535\" src=\"https://www.youtube.com/embed/ltK_AhiXGDU\" title=\"Clair Obscur: Expedition 33 - Official Trailer | Galaxies Gaming Showcase 2025\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n  # Title\n    ## Subtitle\n### Smaller Title\n  **Hello**, \nthis is _italic_, \n\nand a [link](https://example.com)\n\n### Pacman Update Commands\nsudo pacman -Sy  # Sync package databases\n\n```go\n  ### Pacman Update Commands\n  sudo pacman -Sy  # Sync package databases\n\n  import (\n    \"io\",\n    \"os\",\n    \"fmt\"\n  )\n\n  func main(){\n    fmt.Println(\"Hello\")\n  }\n```'\n  />\n}"
        },
        {
            element: test_page_root_tsx.Hello, 
            doc: "Hello  (test/page.root.tsx)", 
            data: "export function Hello() {\n\treturn <div class=\"flex flex-col items-center h-full\">\n\n\t\t<RainbowImage style={{ margin: \"2rem\" }} size=\"200px\" src=\"/solgaleo/logo.png\" />\n\n\t\t<Marquee repeatCount={8} child={() => <RainbowText style={{ \"font-size\": \"3rem\", }} class=\"p2 border-basic\" >\n\t\t\tSOLGALEO\n\t\t</RainbowText>} />\n\n\t\t<Marquee repeatCount={8} child={() =>\n\t\t\t<div class=\"border-basic p2\">\n\t\t\t\tHello how are you\n\t\t\t</div>\n\t\t} />\n\t</div >\n}"
        },
        {
            element: test_page_fancy_tsx.BannerTest, 
            doc: "Banner  (test/page.fancy.tsx)", 
            data: "export function BannerTest() {\n  return <Banner title=\"Tip\"\n  info=\"Although most developers will stick to just one UI framework, Rocket supports multiple frameworks in the same project. This allows you to:\"\n  >\n  <ol>\n    <li>Choose the framework that is best for each component.\n    <ol>\n      <li>Nested item 1</li>\n      <li>Nested item 2</li>\n    </ol>\n    ii  </li>\n    <li>Learn a new framework without needing to start a new project.</li>\n    <li>Collaborate with others even when working in different frameworks.</li>\n    <li>Incrementally convert an existing site to another framework with no downtime.</li>\n  </ol>\n  </Banner>;\n}"
        },
        {
            element: test_page_nav_tsx.BreadcrumbTest, 
            doc: "Breadcrumb  (test/page.nav.tsx)", 
            data: "export function BreadcrumbTest() {\n  return <N.Breadcrumbs items={[\n    {\n      element: <IconHome />,\n      link: \"/\",\n      fn: () => console.log(\"Hello\")\n    },\n    {\n      element: <span>Products</span>,\n      link: \"/products\"\n    },\n    {\n      element: <span>Category</span>\n    }\n  ]} />;\n}"
        },
        {
            element: test_page_ui_tsx.ButtonTest, 
            doc: "Buttons  (test/page.ui.tsx)", 
            data: "export function ButtonTest(setProgress?: (progress: number) => void) {\n  return <div>\n\n    <div>\n      <button>Button</button>\n      <button class={CssUI.ButtonGradient}>ButtonGradient</button>\n      <button class={CssUI.ButtonErrorRound}>ButtonError</button>\n      <button class={CssUI.ButtonActive}>ButtonActive</button>\n      <button class={CssUI.ButtonRev}>ButtonRev</button>\n      <button class={CssUI.ButtonRound}>ButtonRound</button>\n      <button class={CssUI.ButtonRoundRev}>ButtonRoundRev</button>\n      <button class={CssUI.ButtonRoundRev} disabled>Disabled ButtonRoundRev</button>\n    </div>\n\n    <div>\n      <button class={CssUI.ButtonIconPlain}><IconHome /></button>\n      <button class={CssUI.ButtonIconMaterial}><IconHome /></button>\n      <button class={CssUI.ButtonIconMaterialRev}><IconHome /></button>\n      <button class={CssUI.ButtonIcon} onClick={() => {\n        setProgress?.(80);\n      }}><IconHome /></button>\n    </div>\n\n    <div>\n      <button class={CssUI.ButtonMaterial}>ButtonMaterial</button>\n      <button class={CssUI.ButtonMaterialRound}>ButtonMaterialRound</button>\n      <button class={CssUI.ButtonMaterialRev}>ButtonMaterialRev</button>\n      <button class={CssUI.ButtonMaterialRoundRev}>ButtonMaterialRoundRev</button>\n    </div>\n\n    <div>\n      <button class={CssUI.ButtonOutlined}>ButtonOutlined</button>\n      <button class={CssUI.ButtonErrorOutlined}>ButtonErrorOutlined</button>\n      <button class={CssUI.ButtonOutlinedRound}>ButtonOutlinedRound</button>\n      <button class={CssUI.ButtonOutlinedPlain}>ButtonOutlinedPlain</button>\n      <button class={CssUI.ButtonOutlinedRoundPlain}>ButtonOutlinedRoundPlain</button>\n    </div>\n\n    <div>\n      <AsyncButton onClick={async (): Promise<void> => {\n        // Simulate an async operation (e.g., API call)\n        return new Promise((resolve, reject) => {\n          setTimeout(() => {\n            const shouldFail = Math.random() < 0.5; // 50% chance to fail\n            if (shouldFail) {\n              reject(new Error(\"Something went wrong!\"));\n            } else {\n              resolve(); // Resolve without returning a value\n            }\n          }, 2000);\n        });\n      }}>\n        AsyncButton\n      </AsyncButton>\n\n      <button class={CssUI.ButtonElevated}>Elevated</button>\n    </div>\n\n    <Options />\n\n  </div>;\n}"
        },
        {
            element: test_page_chart_tsx.ChartTest, 
            doc: "Chart  (test/page.chart.tsx)", 
            data: "export function ChartTest() {\n\n  const [toggle, setToggle] = createSignal(false);\n\n  return <GridLayout\n  header={<TestHeader />}\n  >\n\n  <button onClick={() => { setToggle(!toggle()) }}>Toggle</button>\n\n  <Grid cols={2} rows={1}>\n\n    <AreaChart\n    curveType={\"catmull-rom\"}\n    chartType={\"line\"}\n    duration={1000}\n    data={[\n      {\n      label: \"Guardians of the Galaxy\",\n      values: toggle() ? r1 : r2,\n      lineColor: \"#f01b1b\",\n      areaColor: \"#f01b1b55\"\n      },\n      {\n      label: \"The Avengers\",\n      values: toggle() ? r3 : r4,\n      lineColor: \"#0099ff\"\n      }\n    ]}\n    />\n\n    <AreaChart\n    chartType={\"bar\"}\n    duration={1000}\n    data={[\n      {\n      label: \"Guardians of the Galaxy\",\n      values: toggle() ? r1 : r2,\n      lineColor: \"#f01b1b\",\n      areaColor: \"#f01b1b55\"\n      },\n      {\n      label: \"The Avengers\",\n      values: toggle() ? r3 : r4,\n      lineColor: \"#0099ff\"\n      }\n    ]}\n    />\n\n    <AreaChart\n    chartType={\"stacked-bar\"}\n    duration={1000}\n    data={[\n      {\n      label: \"Guardians of the Galaxy\",\n      values: toggle() ? r1 : r2,\n      lineColor: \"#f01b1b\",\n      areaColor: \"#f01b1b55\"\n      },\n      {\n      label: \"The Avengers\",\n      values: toggle() ? r3 : r4,\n      lineColor: \"#0099ff\"\n      }\n    ]}\n    />\n\n    <RadarChart\n    radius={100}\n    gridCount={5}\n    duration={1000}\n    labels={[\"Speed\", \"Power\", \"Range\", \"Defense\", \"Agility\"]}\n    padding={40}\n    style={{\n      fontSize: 14,\n      fontColor: '#333333',\n      gridColor: '#e0e0e0',\n      axisColor: '#cccccc'\n    }}\n    data={[\n      {\n      label: \"Guardians of the Galaxy\",\n      values: toggle() ? r1 : r2,\n      color: \"#f01b1b\",\n      fillColor: \"#f01b1b33\"\n      },\n      {\n      label: \"The Avengers\",\n      values: toggle() ? r3 : r4,\n      color: \"#0099ff\"\n      }\n    ]}\n    />\n\n    <CircleChart\n    radius={100}\n    thickness={20}\n    duration={1000}\n    data={[\n      { label: \"Category A\", value: toggle() ? 30 : 40, color: \"#f01b1b\" },\n      { label: \"Category B\", value: toggle() ? 45 : 10, color: \"#0099ff\" },\n      { label: \"Category C\", value: toggle() ? 25 : 40, color: \"#00ff99\" }\n    ]}\n    />\n  </Grid>\n\n  </GridLayout>\n}"
        },
        {
            element: test_demo_dashboard_tsx.Dashboard, 
            doc: "Dashboard  (test/demo.dashboard.tsx)", 
            data: "export function Dashboard() {\n\n  let [currentTab, setCurrentTab] = createSignal(0)\n\n  return <GridLayout\n\n    gridStyle={{ 'grid-template-columns': \"1fr 4fr 2fr\" }}\n\n    header={<TestHeader />}\n\n    left={\n      <div class=\"px4\">\n\n        <TreeView\n          treeStyle={{ width: \"100%\", \"padding-bottom\": \"1rem\" }}\n          buttonStyle={{ \"margin-bottom\": \".8rem\", \"border-radius\": \".5rem\", padding: \".6rem\" }}\n          id=\"pages\"\n          data={[\n            { id: \"Dashboard\", label: <span class='flex gap2'><IconHome /> Dashboard</span> },\n            { id: \"Diagnostics\", label: <span class='flex gap2'><IconAddUser /> Diagnostics</span> },\n            { id: \"DataCenter\", label: <span class='flex gap2'><IconEmail /> Data Center</span> },\n            { id: \"Network\", label: <span class='flex gap2'><IconDown /> Network</span> },\n            { id: \"Security\", label: <span class='flex gap2'><IconChevronRight /> Security</span> },\n            { id: \"Console\", label: <span class='flex gap2'><IconChevronLeft /> Console</span> },\n            { id: \"Communications\", label: <span class='flex gap2'><IconHeart /> Communications</span> },\n            { id: \"Settings\", label: <span class='flex gap2'><IconEmail /> Settings</span> },\n          ]} />\n\n      </div>\n    }\n\n    right={\n      <div class=\"p4 flex flex-col gap4\">\n        <div class=\"flex flex-col items-center gap4 p4 primary br4\">\n          <p>SYSTEM TIME</p>\n          <h3>{new Date().toLocaleTimeString()}</h3>\n          <p>{new Date().toLocaleDateString()}</p>\n        </div>\n\n        <div class=\"flex flex-col p4 gap4 border br4\">\n\n          <h5>Quick Actions</h5>\n\n          <Grid cols={2} rows={1} spacingX={.5} spacingY={.5}>\n            <GridItem class=\"flex flex-col items-center gap4 p4 border br4\">\n              <IconHeart />\n              <p>Security Scan</p>\n            </GridItem>\n            <GridItem class=\"flex flex-col items-center gap4 p4 border br4\">\n              <IconHeart />\n              <p>Sync Data</p>\n            </GridItem>\n            <GridItem class=\"flex flex-col items-center gap4 p4 border br4\">\n              <IconHeart />\n              <p>Backup</p>\n            </GridItem>\n            <GridItem class=\"flex flex-col items-center gap4 p4 border br4\">\n              <IconHeart />\n              <p>Console</p>\n            </GridItem>\n          </Grid>\n\n        </div>\n\n        <div class=\"flex flex-col gap4 p4 space-between border br4\">\n          <h5>Resource Core System</h5>\n\n          <ProgressBar title=\"CPU\" progress={() => 30} boxStyle={{ height: \"8px\" }} progressStyle={{ background: \"orange\", \"border-radius\": \"10px\" }} />\n          <ProgressBar title=\"Security\" progress={() => 30} boxStyle={{ height: \"8px\" }} progressStyle={{ background: \"lightgreen\", \"border-radius\": \"10px\" }} />\n          <ProgressBar title=\"Network\" progress={() => 30} boxStyle={{ height: \"8px\" }} progressStyle={{ background: \"purple\", \"border-radius\": \"10px\" }} />\n        </div>\n\n        <div class=\"flex flex-col gap4 p4 space-between border br4\">\n          <h5>Environment controls</h5>\n\n          <ToggleSwitch\n            class=\"flex space-between items-center\"\n            header={<span>Power Management</span>}\n            name=\"PowerManagement\" />\n          <ToggleSwitch\n            class=\"flex space-between items-center\"\n            header={<span>Security Protocol</span>}\n            name=\"SecurityProtocol\" />\n          <ToggleSwitch\n            class=\"flex space-between items-center\"\n            header={<span>Power Saving Mode</span>}\n            name=\"PowerSavingMode\" />\n          <ToggleSwitch\n            class=\"flex space-between items-center\"\n            header={<span>Auto Shutdown</span>}\n            name=\"AutoShutdown\" />\n        </div>\n      </div>\n    }\n  >\n\n    <div class=\"flex flex-col gap4 p4\">\n\n      <div class=\"border p4 br2\">\n\n        <div class=\"flex space-between items-center pb4\">\n          <h5 class=\"flex gap4 items-center\"><IconCart />System Overview</h5>\n          <button class={CssUI.ButtonErrorRound}>LIVE <IconUpload /></button>\n        </div>\n\n        <hr />\n\n        <Grid cols={3} rows={1} spacingX={1} spacingY={1}\n          style={{ \"margin\": \"20px 0\", }}>\n          <For each={[1, 2, 3]} children={() => {\n            return <GridItem class=\"flex flex-col p4 border br2 gap2\">\n              <span class=\"flex space-between items-center\">\n                <p>Hello</p>\n                <IconHeart />\n              </span>\n              <h4 class=\"bold\">30%</h4>\n              <p>Hello</p>\n            </GridItem>\n          }} />\n        </Grid>\n\n        <TabBar\n          titles={[\"Font\", \"Display\", \"Grid\"]}\n          onTabChange={(i) => { setCurrentTab(i) }}\n        />\n\n        <HList\n          index={currentTab}\n          pageStyle={{ padding: \"4px\" }}\n          pages={[\n\n            <div class=\"h-full flex flex-col justify-end\">\n              <AreaChart\n                curveType={\"catmull-rom\"}\n                chartType={\"line\"}\n                duration={1000}\n                style={{ \"max-height\": \"300px\" }}\n                data={[\n                  {\n                    label: \"Cpu\",\n                    values: [50, 48, 48, 15, 82, 50, 68, 33, 36, 40, 61],\n                    lineColor: \"#f01b1b\",\n                    areaColor: \"#f01b1b55\"\n                  },\n                ]}\n              />\n            </div>,\n\n            <Table\n\n              style={{\n                margin: \"10px 0 0 0\",\n                padding: \"10px\",\n                border: \"1px solid var(--surface)\",\n                \"border-radius\": \"var(--spacing)\"\n              }}\n\n              tableArray={[\n                {\n                  headerItems: [\n                    <p>PID</p>,\n                    <p>Process</p>,\n                    <p>User</p>,\n                    <p>CPU</p>,\n                    <p>Memory</p>,\n                    <p>Status</p>,\n                  ],\n                  rowStyle: {\n                    \"grid-template-columns\": `1fr 2fr 1fr 1fr 1fr 1fr`\n                  },\n                  headerStyle: {\n                    \"grid-template-columns\": `1fr 2fr 1fr 1fr 1fr 1fr`,\n                  },\n                  headerCellStyle: () => {\n                    return {\n                      margin: \"0 .1rem\",\n                      padding: \"10px\",\n                      // background: \"var(--secondary-bg)\",\n                    };\n                  },\n                  rowCellStyle: () => {\n                    return {\n                      margin: \".1rem .1rem\",\n                      padding: \"10px\",\n                      // background: \"var(--primary-bg)\",\n                    };\n                  },\n                  data: [\n                    { pid: 1024, process: \"system_core.exe\", user: \"SYSTEM\", cpu: \"12.4%\", memory: \"345 MB\" },\n                    { pid: 1024, process: \"nexus_service.exe\", user: \"SYSTEM\", cpu: \"12.4%\", memory: \"345 MB\" },\n                    { pid: 1024, process: \"security_monitor.exe\", user: \"SYSTEM\", cpu: \"12.4%\", memory: \"345 MB\" },\n                    { pid: 1024, process: \"network_manager.exe\", user: \"SYSTEM\", cpu: \"12.4%\", memory: \"345 MB\" },\n                    { pid: 1024, process: \"user_interface.exe\", user: \"SYSTEM\", cpu: \"12.4%\", memory: \"345 MB\" },\n                    { pid: 1024, process: \"data_analyzer.exe\", user: \"SYSTEM\", cpu: \"12.4%\", memory: \"345 MB\" },\n                  ].map((s, _i) => {\n                    return {\n                      rowItems: [\n                        <p>{s.pid}</p>,\n                        <p>{s.process}</p>,\n                        <p>{s.user}</p>,\n                        <p style={{ color: \"var(--secondary)\" }}>{s.cpu}</p>,\n                        <p style={{ color: \"var(--primary)\" }}>{s.memory}</p>,\n                        <p class={CssUI.ButtonGradient}>running</p>,\n                      ]\n                    };\n                  }\n                  )\n                }\n              ]}\n\n            />,\n\n            <Grid cols={2} rows={2} spacingX={1} spacingY={1} style={{ padding: \"var(--spacing)\" }}>\n              <For each={[\"CPU\", \"GPU\", \"Memory\", \"Disk\"]}\n                children={(s) => {\n                  return <GridItem class=\"p4 border br2 flex flex-col gap2\">\n                    <span class=\"flex space-between\">\n                      <p>{s}</p>\n                      <p class={CssUI.ButtonGradient}>SSD</p>\n                    </span>\n                    <ProgressBar title={s} progress={() => 40} />\n                  </GridItem>\n                }} />\n            </Grid>,\n          ]}\n        />\n\n      </div>\n\n      <Grid cols={2} rows={1} class=\"py2\" spacingX={1} >\n        <GridItem>\n          <div class=\"flex flex-col gap2 p4 border br2 space-between h-full\">\n\n            <h6 class=\"flex bold items-center gap2 pb4\">\n              <IconHeart strokeWidth={3} style={{ color: \"lightgreen\" }} />\n              Security Status\n            </h6>\n\n            <For each={[\"Firewall\", \"Intrusion Detection\", \"Encryption\"]}\n              children={(name) => {\n                return <div class=\"flex pb2 items-center space-between\">\n                  <p class=\"bold\">{name}</p>\n                  <p class={CssUI.ButtonGradient}>Active</p>\n                </div>\n              }} />\n\n            <hr />\n\n            <div class=\"flex py2 space-between\">\n              <p class=\"bold\">Security Level</p>\n              <p>75%</p>\n            </div>\n\n            <ProgressBar progress={() => 75} boxStyle={{ height: \"8px\" }} />\n          </div>\n        </GridItem>\n\n        <GridItem>\n          <div class=\"flex flex-col gap2 p4 border br2 space-between h-full\">\n\n            <h6 class=\"flex bold items-center gap2 pb4\">\n              <IconHeart strokeWidth={3} style={{ color: \"orange\" }} />\n              System Alerts\n            </h6>\n\n            <For each={[1, 2, 3, 4]} children={() => {\n              return <div class=\"flex gap4 br2 pb2\">\n                <p class={CssUI.ButtonIcon}><IconCheck /></p>\n                <div class=\"flex flex-col w-full\">\n                  <div class=\"flex space-between\">\n                    <p class=\"bold pb2\">System Adminstrator</p>\n                    <p>15:4:12</p>\n                  </div>\n                  <p>Unusual network activity</p>\n                </div>\n              </div>\n\n            }} />\n          </div>\n        </GridItem>\n      </Grid>\n\n      <div class=\"flex flex-col gap2 p2 border br2\">\n\n        <p>Communications Log</p>\n\n        <For each={[1, 2, 3]} children={() => {\n          return <div class=\"flex gap4 p2 items-center border br2\">\n            <p class={CssUI.ButtonIcon}><IconCheck /></p>\n            <div class=\"flex flex-col w-full\">\n              <div class=\"flex space-between\">\n                <p class=\"bold\">System Adminstrator</p>\n                <IconHeart />\n              </div>\n              <p>Unusual login attempt blocked from IP 192.168.1.45.</p>\n            </div>\n          </div>\n\n        }} />\n      </div>\n\n    </div>\n\n  </GridLayout>\n}"
        },
        {
            element: test_page_grid_tsx.FixedAll3, 
            doc: "GridLayout : Standard layouts  (test/page.grid.tsx)", 
            data: "export function FixedAll3() {\n  return <GridLayout\n    header={<TestHeader />}\n    left={<TestVCarousel />}\n    right={<TestVCarousel />}\n  >\n    <TestVCarousel />\n  </GridLayout>\n}"
        },
        {
            element: test_NotFound_tsx.NotFound, 
            doc: "Ghost  (test/NotFound.tsx)", 
            data: "export function NotFound() {\n   return (\n    <GridLayout\n     title='Page Not Found'\n     header={<TestHeader />}\n    >\n     <div class=\"flex flex-col justify-center items-center gap8 h-full\">\n      <h1>404 - Page Not Found</h1>\n      <a title=\"Return to Home\" href=\".\">\n         <RainbowText>Return to Home</RainbowText>\n      </a>\n\n      <GhostComponent\n         ghostColor=\"#3a3a3a4d\"\n         waveColor=\"#8c2ec26c\"\n         eyeColor='#f8474787'\n      />\n\n     </div>\n    </GridLayout>\n   );\n}"
        },
        {
            element: test_common_tsx.TestHeader, 
            doc: "Header  (test/common.tsx)", 
            data: "export function TestHeader() {\n  return <Header\n    title={<AA href=\"/\">\n      <IMG src=\"/logo.png\" alt=\"solgaleo\" />\n      <p>Solgaleo</p>\n    </AA>}\n    links={[\n      <AA href={'/nav'} title='Nav'>Nav</AA>,\n      <AA href={'/adv'} title='Adv' >Adv</AA>,\n      <AA href={'/svg'} title='Svg' >Svg</AA>,\n      <AA href={'/fancy'} title='Fancy' >Fancy</AA>,\n      <AA href={'/ui'} title='Ui' >Ui</AA>,\n      <AA href={'/grid'} title='Grid'>Grid</AA>,\n      <AA href=\"/chart\" >Chart</AA>,\n      <AA href=\"/tabs\" >Tab</AA>,\n      <AA href=\"/tabs?two.light=Root.Pictures.Vacation\" >Tabs</AA>,\n    ]}\n    right={[\n      <button\n        class={CssUI.ButtonRound}\n        type=\"button\"\n        onClick={() => window.open('https://github.com/codeharik/solgaleo', '_blank')}>\n        Github\n      </button>,\n      <ThemeToggle />\n    ]}\n  />;\n}"
        },
        {
            element: test_demo_mobile_tsx.MobileApp, 
            doc: "MobileApp  (test/demo.mobile.tsx)", 
            data: "export function MobileApp() {\n  return (\n    <GridLayout header={<MobileHeader />} footer={<BottomBar />}>\n\n      <div class=\"product-image\"></div>\n\n      <div class=\"product-info\">\n\n        <div class=\"price-favorite\">\n          <h1 class=\"price flex space-between items-center\"><span>£173</span>\n            <button class={CssUI.ButtonIconPlain}>\n              <IconHeart fill style={{ color: \"#fb6f6f\" }} />\n            </button>\n          </h1>\n        </div>\n\n        <h5 class=\"bold\">Yellow Nike Sunshine Trainers</h5>\n\n        <RatingsBar ratings={5} />\n\n      </div>\n\n      <Options style={{ \"margin-top\": \"16px\" }} />\n\n      <div class=\"p4\">\n\n        <button class={CssUI.ButtonMaterialRoundRev} style={{ width: \"100%\" }}>ADD TO BAG</button>\n\n        <div class=\"product-description\">\n          <p>\n            Lorem ipsum dolor sit amet consectetur. Enim nisi et volutpat sed bibendum molestie diam. Vestibulum\n            posuere in lacus sit sit vulputate. Adipiscing sit ornare ultricies id quis. Quisque viverra eleifend leo\n            elit convallis a parturient.\n          </p>\n          <p>\n            Blandit purus eget nulla a eu urna etiam netus. Ut aenean integer et donec nulla cras velit integer\n            adipiscing habitant.\n          </p>\n        </div>\n      </div>\n\n      <Grid cols={2} rows={2} spacingX={1} style={{ padding: \"0 16px\" }}>\n        {products.map((product) => (\n          <div class=\"product-card\" >\n            <div class=\"product-image\">\n              <button class={CssUI.ButtonIconPlain} style={{\n                position: \"absolute\",\n                right: \"8px\",\n                bottom: \"8px\",\n              }}>\n                <IconHeart />\n              </button>\n\n            </div>\n            <div class=\"product-info\">\n              <h5>{product.price}</h5>\n              <p class=\"product-description\">{product.description}</p>\n            </div>\n          </div>\n        ))}\n      </Grid>\n\n    </GridLayout>\n  )\n}"
        },
        {
            element: test_page_adv_tsx.SuperTableTest, 
            doc: "SuperTable : Table with sticky header  (test/page.adv.tsx)", 
            data: "export function SuperTableTest() {\n  return <Table\n\n    style={{\n      \"max-height\": \"300px\",\n      \"overflow-y\": \"scroll\",\n      margin: \"10px\",\n      width: \"90%\",\n      \"box-shadow\": \"rgba(0, 0, 0, 0.1) 0px 0px 6px 2px\",\n    }}\n\n    tableArray={[\"#eedbf7\", \"#ffd5ca\", \"#d3fcdd\",].map((tableHeaderColor) => {\n      return {\n        headerItems: [\n          <><p>User Agent </p><IconTableHeading /></>,\n          <><p>Started </p><IconTableHeading /></>,\n          <><p>Active </p><IconTableHeading /></>,\n          <><p>Valid </p><IconTableHeading /></>,\n          <p>Revoke</p>,\n        ],\n        rowStyle: {\n          \"grid-template-columns\": `1fr 2fr 1fr 1fr 1fr`\n        },\n        headerStyle: {\n          \"grid-template-columns\": `1fr 2fr 1fr 1fr 1fr`,\n        },\n        headerCellStyle: () => {\n          return {\n            margin: \".1rem\",\n            padding: \"10px\",\n            background: tableHeaderColor,\n            color: \"black\",\n          };\n        },\n        rowCellStyle: (row, col) => {\n          return {\n            padding: \"10px\",\n            margin: \".1rem\",\n            background: (col == 1 || row == 1) ? tableHeaderColor : \"red\",\n            color: \"black\",\n          };\n        },\n        data: [\n          { agent: \"Hello\", iat: 1744696177, exp: 1744696177 },\n          { agent: \"Hello\", iat: 1744696177, exp: 1744696177 },\n          { agent: \"Hello\", iat: 1744696177, exp: 1744696177 },\n          { agent: \"Hello\", iat: 1744696177, exp: 1744696177 },\n          { agent: \"Hello\", iat: 1744696177, exp: 1744696177 },\n          { agent: \"Hello\", iat: 1744696177, exp: 1744696177 },\n        ].map((s, _i) => {\n          return {\n            // info: <p>`Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the `</p>,\n            hiddenDetails: <div>More info...</div>,\n\n            rowItems: [\n              <p>{s.agent}</p>,\n\n              <p>{(() => {\n                let d = new Date(Number(s.iat) * 1000);\n                return d.toLocaleDateString() + \" (\" + d.toLocaleTimeString() + \")\";\n              })()}</p>,\n              <p>Active</p>,\n              <p>{s.exp.toString()}</p>,\n              <button class={CssUI.ButtonIcon}><IconCross /></button>\n            ]\n          };\n        }\n        )\n      };\n    })}\n  />\n}"
        },
        {
            element: test_page_svg_tsx.tSvg, 
            doc: "Svg  (test/page.svg.tsx)", 
            data: "export function tSvg() {\n  return <div class={CssTEST.IconGrid}>\n    {icons.map(({ component: Icon, name }) => (\n      <div class={CssTEST.IconItem}>\n        <Icon style={{ width: \"4rem\", height: \"4rem\" }} />\n        <span class={CssTEST.IconLabel}>{name}</span>\n      </div>\n    ))}\n  </div>\n\n}"
        },
        {
            element: test_page_tabs_tsx.TestTreeView, 
            doc: "TreeView  (test/page.tabs.tsx)", 
            data: "export function TestTreeView() {\n  return <TreeView\n    id=\"two.light\"\n    data={sampleTabData()}\n    updateRoute\n    onClick={(node) => {\n      console.log(\"Leaf clicked:\", node);\n    }} />;\n}"
        },
        {
            element: test_page_ui_tsx.TestTree, 
            doc: "TreeView  (test/page.ui.tsx)", 
            data: "export function TestTree() {\n  return <TreeView\n    id=\"testtree\"\n    onClick={(data) => { console.log(data.data); }}\n    treeStyle={{\n      \"flex-direction\": \"row\"\n    }}\n    data={[\n      {\n        id: \"settings\",\n        label: \"settings\",\n        header: \"Settings\",\n        children: [\n          {\n            id: \"profile\",\n            label: <span>Profile</span>,\n            data: \"profile\",\n            children: [\n              {\n                id: \"editInfo\",\n                label: <span>Edit Info</span>,\n                data: \"profile.edit\",\n                children: [\n                  {\n                    id: \"profile\",\n                    label: <span>Profile</span>,\n                    data: \"profile\",\n                    children: [\n                      {\n                        id: \"editInfo\",\n                        label: <span>Edit Info</span>,\n                        data: \"profile.edit\"\n                      },\n                      {\n                        id: \"privacy\",\n                        label: <span>Privacy</span>,\n                        data: \"profile.privacy\"\n                      }\n                    ]\n                  },\n                ]\n              },\n              {\n                id: \"privacy\",\n                label: <span>Privacy</span>,\n                data: \"profile.privacy\"\n              }\n            ]\n          },\n          {\n            id: \"account\",\n            label: <span>Account</span>,\n            data: \"account\",\n            children: [\n              {\n                id: \"security\",\n                label: <span>Security</span>,\n                data: \"account.security\"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        id: \"names\",\n        label: \"names\",\n        header: \"Names\",\n        open: true,\n        children: [\n          {\n            id: \"themostpopular\",\n            label: \"The most popular\",\n            data: \"Hello\",\n          },\n          {\n            id: \"increasingprice\",\n            label: <p> Increasing price </p>,\n          },\n        ]\n      },\n    ]} />;\n}"
        },
        {
            element: test_page_grid_tsx.TestVCarousel, 
            doc: "VCarousel : Vertical carousel list  (test/page.grid.tsx)", 
            data: "export function TestVCarousel() {\n  return <VCarousel children={[\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"nine\",\n    \"ten\",\n  ]}\n    itemStyle={{\n      background: \"var(--primary-bg)\",\n      padding: \"10px\",\n      \"border-radius\": \"1rem\",\n      height: \"200px\",\n      \"text-align\": 'center',\n      \"align-content\": 'center'\n    }}\n    listStyle={{ padding: \"10px\" }} />\n}"
        }
    ]
} as const;

export type CssTESTType = keyof typeof CssTEST;

/*

*/

:root {
    --svg-size: 1.3rem;
    --input-accent-color: var(--primary);
    --ghostColor: ;
    --ghostEyeColor: ;
    --ghostWaveColor: ;
    --ghostCircleRadius: ;
    --ghostCircleSize: ;
    --ghostCircleDistance: ;
    --flicker-shadow: #36e2f8;
    --rainsrc: ;
    --rainsize: ;
    --spacing: 1rem;
    --border: 1px;
    --button-padding: 0.5rem .75rem;
    --icon-padding: .5rem;
    --primary-border: oklch(from var(--primary) calc(l + 0.1) c h);
    --error: #ffffff;
    --error-bg: #e85b53;
    --modal-bg: oklch(from var(--body-bg) calc(l + .3) c h);
    --modal-col: var(--body);
    --size-0: 0;
    --size-1: calc(var(--spacing) * 0.25);
    --size-2: calc(var(--spacing) * 0.5);
    --size-4: calc(var(--spacing) * 1);
    --size-8: calc(var(--spacing) * 2);
    --size-16: calc(var(--spacing) * 4);
}

.light {
    --input-bg: #ffffff;
    --body-bg: white;
    --body: black;
    --primary: #6750A4;
    --primary-bg: #EADDFF;
    --secondary: #b4216b;
    --secondary-bg: #ffe3f1;
    --surface: oklch(from var(--body) calc(l + .5) c h);
    --surface-bg: oklch(from var(--body-bg) calc(l - .025) c h);
    --surface-tint: oklch(from var(--surface-bg) calc(l - .08) c h);
    --disabled: #bdbdbd;
    --disabled-bg: #e7e7e7;
    --a-hover-col: #ffac90;
    --a-active-col: #cf90ff;
}

.night {
    --input-bg: #3b3b3b;
    --body-bg: black;
    --body: white;
    --primary: #d8c8fa;
    --primary-bg: #4F378B;
    --secondary: #b4216b;
    --secondary-bg: #454245;
    --surface: oklch(from var(--body) calc(l + .3) c h);
    --surface-bg: oklch(from var(--body-bg) calc(l + .25) c h);
    --surface-tint: oklch(from var(--surface-bg) calc(l + .08) c h);
    --disabled: #8b8b8b;
    --disabled-bg: #565656;
    --a-hover-col: #ffac90;
    --a-active-col: #cf90ff;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}
.animate-spin {
    animation: spin 1s linear infinite;
}
svg {
    display: inline-block;
    width: 1em;
    height: 1em;
    color: currentColor;
}
.DragBox {
        position: fixed;
        inset: 0px;
        background-color: #e7e7e727;
        pointer-events: none;
    }
    .DragBox > div {
        display: flex;
        padding: 1rem;
        justify-content: center;
        align-items: center;
        width: 10rem;
        height: 10rem;
        color: #ffffff;
        background-color: #ff3fc2d6;
        cursor: move;
        pointer-events: auto;
    }
.Card {
    border: 1px solid var(--surface);
    border-radius: 0.5rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}
.CardHeader {
    padding: 1rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
}
.CardContent {
    padding: calc(.5 * var(--spacing));
}
.CardFooter {
    padding: calc(.5 * var(--spacing));
    display: flex;
    justify-content: flex-end;
    gap: calc(.5 * var(--spacing));
}
.GridLayout {
    width: 100%;
    height: 100%;
    display: grid;
    gap: .1rem;
}
.GridLayoutFixed {
    grid-template-areas:
        "header  header  header"
        "left   middle  right"
        "footer footer  footer";
    grid-template-columns: minmax(200px, 15%) 1fr minmax(200px, 15%);
    grid-template-rows: auto 1fr auto;
}
.GridLayoutFixed:not(:has(> .GridLeft)):not(:has(> .GridRight)) {
    grid-template-columns: 1fr;
    grid-template-areas:
        "header"
        "middle"
        "footer";
}
.GridLayoutFixed:not(:has(> .GridLeft)):has(> .GridRight) {
    grid-template-columns: 1fr minmax(200px, 15%);
    grid-template-areas:
        "header  header"
        "middle  right"
        "footer  footer";
}
.GridLayoutFixed:has(> .GridLeft):not(:has(> .GridRight)) {
    grid-template-columns: minmax(200px, 15%) 1fr;
    grid-template-areas:
        "header header"
        "left   middle"
        "footer footer";
}
.GridLayoutScroll {
    grid-template-areas: "left middle right";
    grid-template-columns: minmax(200px, 15%) 1fr minmax(200px, 15%);
}
.GridLayoutScroll:not(:has(> .GridLeft)):not(:has(> .GridRight)) {
    grid-template-columns: 1fr;
    grid-template-areas: "middle";
}
.GridLayoutScroll:not(:has(> .GridLeft)):has(> .GridRight) {
    grid-template-columns: 1fr minmax(200px, 15%);
    grid-template-areas: "middle right";
}
.GridLayoutScroll:has(> .GridLeft):not(:has(> .GridRight)) {
    grid-template-columns: minmax(200px, 15%) 1fr;
    grid-template-areas: "left middle";
}
.GridHeader {
    grid-area: header;
}
.GridFooter {
    grid-area: footer;
}
.GridLeft {
    grid-area: left;
    overflow-y: auto;
}
.GridRight {
    grid-area: right;
    overflow-y: auto;
}
.GridMiddle {
    grid-area: middle;
    overflow-y: auto;
}
.GridScrollContainer {
    display: flex;
    flex-direction: column;
    min-height: 100%;
}
.GridContent {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
}
.GridLayoutFlow {
    grid-template-areas:
        "header header header"
        "left  middle right";
    grid-template-columns: minmax(200px, 15%) 1fr minmax(200px, 15%);
}
.GridLayoutFlow:not(:has(> .GridLeft)):not(:has(> .GridRight)) {
    grid-template-columns: 1fr;
    grid-template-areas:
        "header"
        "middle";
}
.GridLayoutFlow:not(:has(> .GridLeft)):has(> .GridRight) {
    grid-template-columns: 1fr minmax(200px, 15%);
    grid-template-areas:
        "header header"
        "middle right";
}
.GridLayoutFlow:has(> .GridLeft):not(:has(> .GridRight)) {
    grid-template-columns: minmax(200px, 15%) 1fr;
    grid-template-areas:
        "header header"
        "left  middle";
}
.GridLayoutFlow .GridLeft,
.GridLayoutFlow .GridRight {
    position: static;
    height: auto;
    padding-top: 1rem;
    border: none;
    overflow: visible;
}
.GridLayoutFlow .GridRight {
    border-right: none;
}
.GridLayoutFlow .GridMiddle {
    overflow: hidden;
}
.GridLayoutFlow .GridScrollContainer {
    min-height: auto;
}
.GridLayoutFlow .GridContent {
    overflow: visible;
}
.GridLayoutFlow .GridFooter {
    grid-column: 1 / -1;
    margin-top: 1rem;
}
@media (min-width: 0px) {
    .grid {
        --cols: var(--cols-xs);
        --rows: var(--rows-xs);
        --gap-x: var(--gap-x-xs);
        --gap-y: var(--gap-y-xs);
    }
}
@media (min-width: 600px) {
    .grid {
        --cols: var(--cols-sm);
        --rows: var(--rows-sm);
        --gap-x: var(--gap-x-sm);
        --gap-y: var(--gap-y-sm);
    }
}
@media (min-width: 900px) {
    .grid {
        --cols: var(--cols-md);
        --rows: var(--rows-md);
        --gap-x: var(--gap-x-md);
        --gap-y: var(--gap-y-md);
    }
}
@media (min-width: 1200px) {
    .grid {
        --cols: var(--cols-lg);
        --rows: var(--rows-lg);
        --gap-x: var(--gap-x-lg);
        --gap-y: var(--gap-y-lg);
    }
}
.AccordionLabel {
    cursor: pointer;
    :hover {
        background: var(--surface-bg);
    }
}
.AccordionContent {
    max-height: 0;
    overflow: hidden;
    transition: all 0.2s ease-out;
    opacity: 0;
}
.Progress {
    height: 4px;
    background: var(--surface-bg);
    border-radius: 5px;
    overflow: hidden;
}
.ProgressFill {
    height: 100%;
    background: var(--primary);
    transition: width 0.2s ease-in-out;
}
button, .ButtonIcon, .ButtonMaterial, .ButtonOutlined,
.ButtonMaterialRound, .ButtonOutlinedRound {
    display: inline-flex;
    font-size: inherit;
    gap: 0.5rem;
    padding: var(--button-padding);
    align-items: center;
    justify-content: center;
    color: var(--primary);
    background: var(--surface-bg);
    border: var(--border) solid transparent;
    user-select: none;
    cursor: pointer;
    background-repeat: no-repeat;
    background-position: center;
    transition: all 0.6s;
}
button:focus {
    outline: none;
}
button:hover, .ButtonMaterial:hover, .ButtonMaterialRound:hover {
    background: var(--surface-bg) radial-gradient(circle, transparent 1%, var(--surface-bg) 1%) center/15000%;
}
.ButtonIcon:hover,  .ButtonOutlined:hover, .ButtonOutlinedRound:hover {
    color: var(--primary);
    background: var(--primary-bg) radial-gradient(circle, transparent 1%, var(--primary-bg) 1%) center/15000%;
}
button:active, .ButtonIcon:active, .ButtonMaterial:active, .ButtonOutlined:active,
.ButtonMaterialRound:active, .ButtonOutlinedRound:active {
    background-color: var(--surface);
    background-size: 100%;
    transition: background 0s;
}
button:disabled {
    color: var(--disabled);
    border: var(--border) solid var(--disabled);
    background: var(--disabled-bg);
    cursor: not-allowed;
}
.ButtonIcon, .ButtonIconPlain, .ButtonIconMaterial, .ButtonIconMaterialRev {
    padding: var(--icon-padding);
    border-radius: 100rem;
}
.ButtonIconPlain {
    color: var(--surface);
    background: transparent;
}
.ButtonRev, .ButtonRoundRev {
    color: var(--body-bg);
    background: var(--body);
    border: var(--border) solid var(--body);
}
.ButtonMaterial, .ButtonMaterialRound, .ButtonIconMaterial {
    color: var(--body);
    background: var(--primary-bg);
    border: var(--border) solid transparent;
}
.ButtonMaterialRev, .ButtonMaterialRoundRev, .ButtonIconMaterialRev {
    color: var(--body-bg);
    background: var(--primary);
    border: var(--border) solid transparent;
}
.ButtonOutlined, .ButtonOutlinedRound {
    color: var(--primary);
    background: transparent;
    border: var(--border) solid var(--primary-border);
}
.ButtonOutlinedPlain, .ButtonOutlinedRoundPlain {
    color: var(--surface);
    background: transparent;
    border: var(--border) solid var(--surface-tint);
}
.ButtonRound, .ButtonRoundRev, .ButtonOutlinedRound, .ButtonOutlinedRoundPlain, .ButtonMaterialRound, .ButtonMaterialRoundRev, .ButtonErrorRound, .ButtonErrorOutlinedRound  {
    border-radius: .5rem;
}
.ButtonGradient {
    background: linear-gradient(45deg, var(--primary-bg), var(--secondary-bg));
    border-radius: 2rem;
    padding: .3rem .5rem;
}
.ButtonError, .ButtonErrorRound {
    color: var(--error);
    background: var(--error-bg);
}
.ButtonErrorOutlinedRound, .ButtonErrorOutlined {
    color: var(--error-bg);
    background: var(--body-bg);
    border: var(--border) solid var(--error-bg);
}
.ButtonElevated {
    color: var(--body);
    border: 1px solid var(--body-bg);
    border-radius: 4px;
    padding: 0.8em 2em;
    background: var(--body-bg);
    transition: 0.2s;
}
.ButtonElevated:hover {
    color: var(--primary);
    transform: translate(-0.25rem, -0.25rem);
    background: var(--primary-bg);
    box-shadow: 0.25rem 0.25rem var(--surface-bg);
}
.ButtonElevated:active {
    transform: translate(0);
    box-shadow: none;
}
.selection-options {
    display: flex;
    border-top: var(--border) solid var(--surface-tint);
    border-bottom: var(--border) solid var(--surface-tint);
}
.option {
    flex: 1;
    padding: 16px 0;
    display: flex;
    gap: 8px;
    justify-content: center;
    align-items: center;
    color: var(--surface);
    border-left: var(--border) solid var(--surface-tint);
}
fieldset {
    border: none;
    padding: 0;
}
input[type="checkbox"], input[type="radio"] {
    accent-color: var(--input-accent-color, var(--primary));
    width: 1rem;
    height: 1rem;
    margin: .25rem;
}
input[type="checkbox"]:disabled, input[type="radio"]:disabled {
    cursor: not-allowed;
}
select {
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    border-width: 1px;
    border-color: var(--primary-bg);
    outline-style: none;
    font-size: 0.875rem;
    line-height: 1.25rem;
    color: var(--primary);
    background: var(--surface-bg);
    appearance: none;
    :disabled {
        cursor: not-allowed;
        opacity: 0.75;
    }
    :hover ~ .SelectChevron {
        transform: translateX(-150%) scale(1.2);
        transition: transform 0.15s ease;
    }
}
.SelectChevron {
    transform: translateX(-150%);
    align-self: center;
    width: 1.25rem;
    height: 1.25rem;
    pointer-events: none;
    color: var(--primary);
}
.Chips {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
}
.Chip {
    padding: 0.5rem 1rem;
    border-radius: 1rem;
    border: 1px solid var(--primary);
    background: var(--surface-bg);
    color: var(--primary);
    cursor: pointer;
    transition: all 0.2s ease;
}
.ChipSelected {
    background: var(--primary-bg);
    color: var(--primary);
}
.ChipDisabled {
    opacity: 0.5;
    cursor: not-allowed;
}
.ToggleSwitch {
    width: 60px;
    height: 30px;
    background: var(--surface-bg);
    border-radius: 15px;
    border: 1px solid var(--primary);
    position: relative;
    cursor: pointer;
    transition: background-color 0.3s;
}
.ToggleThumb {
    width: 26px;
    height: 26px;
    background-color: var(--primary);
    border-radius: 50%;
    position: absolute;
    margin-left: 2px;
    transition: transform 0.3s;
}
.ToggleChecked .ToggleThumb {
    transform: translateX(28px);
}
.ToggleChecked {
    background: var(--primary-bg);
}
.Input {
    position: relative;
    background: sol(var(--input-bg), var(--surface-bg));
    border-bottom: 2px solid var(--primary-bg);
    >input, >textarea {
        width: 100%;
        padding: .5rem;
        font-size: 0.875rem;
        color: var(--primary);
        background: transparent;
        border: none;
        outline: none;
        resize: vertical;
    }
    > input:disabled, > textarea:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    > input:disabled ~ label, > textarea:disabled ~ label {
        opacity: 0.5;
    }
    > input::placeholder, > textarea::placeholder {
        color: var(--primary);
    }
    [data-has-icon="true"] > input ~ label, [data-has-icon="true"] > textarea ~ label {
        left : 3rem;
    }
    > input:focus::placeholder, > textarea:focus::placeholder {
        color: var(--primary);
        transition: color 0.2s ease-out;
    }
    label {
        position: absolute;
        top: 0rem;
        left: 1rem;
        color: transparent;
        border: 1px solid transparent;
        font-size: 0.875rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        pointer-events: none;
        transition: all 0.2s ease-in-out;
        transform-origin: 0 0;
        align-self: anchor-center;
    }
    :has([data-has-icon="false"]) label {
        display: none;
    }
    :has(input[type="range"]) {
        margin: 0rem 1rem;
    }
    > input:focus-within ~ label,
    > textarea:focus-within ~ label,
    > input:not(:placeholder-shown) ~ label,
    > textarea:not(:placeholder-shown) ~ label {
        --label-transform-x: 0.6rem;
        --label-transform-y: -1.0rem;
        --label-scale: 0.85;
        --input-label-focus-color: var(--primary);
        --input-label-focus-bg: transparent;
        transform: 
            translateX(var(--label-transform-x))
            translateY(var(--label-transform-y))
            scale(var(--label-scale));
        top: 0rem;
        left: 0rem;
        height: auto;
        opacity: 1;
        color: var(--input-label-focus-color);
        background: var(--input-label-focus-bg);
        align-self: auto;
    }
}
.InputIcon {
    pointer-events: none;
    padding-inline-start: 1rem;
}
.InputEnd {
    display: flex;
    gap: .25rem;
    justify-content: space-around;
    background: var(--input-bg, inherit);
    cursor: pointer;
}
.InputEnd:focus {
    outline: 2px solid transparent;
    outline-offset: 2px;
}
.ErrorTextInput {
    border-color: var(--error);
}
.ErrorText {
    font-size: 0.875rem;
    line-height: 1.25rem;
    color: var(--error);
}
input[type="range"] {
    padding: 0;
    -webkit-appearance: none;
    border-radius: 50%;
    cursor: pointer;
}
.Input[data-is-range="true"] {
    border-bottom: none;
}
input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    height: 1rem;
    width: 1rem;
    border-radius: 50%;
    background: none;
    cursor: pointer;
    margin-top: -0.25rem;
}
input[type="range"]::-webkit-slider-runnable-track {
    width: 100%;
    height: 0.5rem;
    border-radius: 0.25rem;
        background: linear-gradient(
        to right,
        var(--primary) 0%,
        var(--primary) var(--value-left, 0%),
        var(--primary-bg) var(--value-left, 0%),
        var(--primary-bg) 100%
    );
}
.RangeValue {
    position: absolute;
    left: var(--value-left, 0);
    transform: translateX(-50%);
    background: var(--secondary-bg);
    color: var(--secondary);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    pointer-events: none;
    transition: opacity 0.2s;
}
input[type="range"]:hover ~ .RangeValue,
input[type="range"]:focus ~ .RangeValue {
    opacity: 1;
}
.UploadContainer {
    border: 2px dashed var(--primary);
    margin: 0.5rem;
    border-radius: 1rem;
    padding: 1rem;
    flex-direction: column;
    align-items: baseline;
    width: max-content;
}
.Dropzone {
    min-height: 250px;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    text-align: center;
    cursor: pointer;
}
.DropzoneDragging {
    background: var(--surface-bg);
}
.ImagePreview {
    height: auto;
    flex-shrink: 0;
    display: block;
    margin: 0 auto;
}
.ImagePreviewInvalid {
    filter: blur(8px);
}
.InvalidMessage {
    position: absolute;
    color: var(--surface);
    background: var(--primary);
    padding: 0.5rem;
    border-radius: 0.25rem;
}
.HiddenInput {
    display: none;
}
.Markdown {
    background: var(--surface-bg);
}
.MarkdownCode {
    background: var(--surface-bg);
    >div {
        padding: .5rem;
        background: var(--primary-bg);
        display: flex;
        justify-content: space-between;
    }
}
.MarkdownImage {
    max-width: 100%;
    height: auto;
    border-radius: 4px;
    margin: 1rem 0;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}
.MarkdownIframe {
    margin: 1rem 0;
    width: 100%;
    display: flex;
    justify-content: center;
}
.MarkdownIframe iframe {
    max-width: 100%;
    border: 1px solid #eaeaea;
    border-radius: 4px;
}
.HeadingLink {
    text-decoration: none;
    * {
        display: inline-block;
    }
    h1::before,
    h2::before,
    h3::before,
    h4::before,
    h5::before,
    h6::before {
        content: "# ";
        opacity: 0;
    }
    h1:hover::before,
    h2:hover::before,
    h3:hover::before,
    h4:hover::before,
    h5:hover::before,
    h6:hover::before {
        opacity: 1;
        cursor: pointer;
    }
}
.RichContainer {
    display: flex;
    gap: 1rem;
}
.RichEditorPane, .preview-pane {
    flex: 1;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
}
.RichToolbar {
    padding: 0.5rem;
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    button, select {
        padding: 0.2rem 0.4rem;
    }
    input[type="color"] {
        width: 32px;
        height: 32px;
        padding: 0;
        border: 1px solid var(--primary);
        border-radius: 4px;
        cursor: pointer;
    }
    input[type="color"]::-webkit-color-swatch-wrapper {
        padding: 0;
    }
    input[type="color"]::-webkit-color-swatch {
        border: none;
        border-radius: 4px;
    }
}
.RichEditor {
    flex: 1;
    padding: 1rem;
    min-height: 300px;
    outline: none;
    [data-edit]::selection {
        color: unset;
        background: unset;
    }
    [data-edit] {
        outline: 1px dashed #888;
    }
    img {
        max-width: 100%;
        height: auto;
        margin: 0.5rem 0;
    }
    ul, ol {
        margin: 0.5rem 0;
        padding-left: 1.5rem;
    }
    li {
        margin: 0.25rem 0;
    }
}
.RichPreview {
    width: 40%;
    padding: 1rem;
    font-family: monospace;
    overflow: auto;
    pre {
        white-space: pre-wrap;
        word-break: break-word;
        margin-bottom: 1rem;
    }
    span[style*="background-color"] {
        display: inline-block;
        padding: 0 2px;
        border-radius: 2px;
    }
    span[style*="cursor: pointer"] {
        text-decoration: underline;
        &:hover {
            opacity: 0.8;
        }
        &:active {
            opacity: 0.6;
        }
    }
}
.BlogContainer {
    display: flex;
    width: 100%;
    align-items: flex-start;
    justify-content: center;
}
.BlogSection {
    display: flex;
    flex-direction: column;
    width: 80%;
}
.BlogAside {
    max-width: 300px;
    max-height: 300px;
    position: sticky;
    top: 25%;
    display: flex;
    flex-direction: column;
    align-items: center;
    background: var(--surface-bg);
    padding: 20px;
    border-radius: 10px;
    overflow-x: clip;
    overflow-y: auto;
}
.BlogItem {
    padding: 1rem;
}
.BlogItemAnimate {
    animation: fadeSlideIn 1s ease forwards;
}
.BlogLinkActive {
    font-weight: bold;
    color: var(--secondary);
    transition: color 0.5s ease, transform 0.3s ease;
    transform: scale(1.05);
}
.SuperTable {
    display: flex;
    flex-direction: column;
    border-radius: 0.75rem;
    background-clip: border-box;
}
.TableHeader {
    display: flex;
    overflow: hidden;
    align-items: center;
    justify-content: space-between;
    background-clip: border - box;
}
.TableFooter {
    display: flex;
    align-items: center;
    justify-content: space-between;
}
.TableHeaderContainer {
    display: grid;
    flex-direction: column;
    position: sticky;
    top: 0;
    z-index: 10;
}
.CellItem {
    display: flex;
    align-items: center;
}
.TableRowDetails {
    overflow: hidden;
    transition: max-height .8s ease, opacity 0.3s ease;
    max-height: 0;
    opacity: 0;
}
.TableRowDetailsShow {
    padding: 1rem;
    max-height: 4rem;
    opacity: 1;
}
.scroll-layout {
    display: grid;
    grid-template-areas: 
    "left scroll right"
    ". markers .";
    grid-template-areas: 
    "scroll scroll scroll"
    "left markers right";
    grid-template-columns: auto 1fr auto;
    .carousel {
        grid-area: scroll;
    }
}
.carousel {
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    overscroll-behavior-x: contain;
    scroll-marker-group: after;
    scrollbar-width: none;
    display: grid;
    grid-auto-flow: column;
    gap: 1.5rem;
    padding: 1rem;
    grid: none / auto-flow 40vmin;
    gap: 15px;
    margin: 0;
    &::scroll-button(*) {
        inline-size: 48px;
        aspect-ratio: 1;
        border-radius: 1e3px;
        border: 1px solid var(--primary-bg);
        color: var(--primary);
        margin: 5px;
        background: var(--primary-bg);
    }
    &::scroll-button(*):focus-visible {
        outline-offset: 5px;
    }
    &::scroll-button(*):disabled {
        color: var(--disabled);
        background: var(--disabled-bg);
    }
    &::scroll-button(*):not(:disabled):is(:hover, :active) {
        background-color: var(--primary-bg);
    }
    &::scroll-button(*):not(:disabled):active {
        scale: 90%;
    }
    &::scroll-button(left) {
        content: "⬅" / "Scroll Left";
        grid-area: left;
    }
    &::scroll-button(right) {
        content: "⮕" / "Scroll Right";
        grid-area: right;
    }
    &::scroll-marker-group {
        padding: 15px;
        display: flex;
        gap: 0.4em;
        align-items: center;
        place-content: center;
        overflow: auto;
        overscroll-behavior-x: contain;
        scrollbar-width: none;
        scroll-snap-type: x mandatory;
    }
    & > li {
        counter-increment: markers;
        &::scroll-marker {
            content: " ";
            padding: 15px;
            text-decoration: none;
            border: 1px solid var(--primary-bg);
            border-radius: 20%;
            outline-offset: 4px;
            -webkit-tap-highlight-color: transparent;
            scroll-snap-align: center;
        }
        &::scroll-marker:is(:hover, :focus-visible) {
            border-color: var(--primary);
        }
        &::scroll-marker:target-current {
            background: var(--primary);
        }
    }
    & > li {
        list-style-type: none;
        border: 1px solid #88888844;
        scroll-snap-align: center;
        container-type: scroll-state;
        overflow: hidden;
        >figure {
            display: grid;
            place-items: end stretch;
            >* {
                grid-area: 1 / 1;
                overflow: hidden;
            }
            >figcaption {
                display: grid;
                gap: .5rem;
                transition: transform .3s var(--ease-3);
                background: linear-gradient(to top, var(--secondary-bg), 75%, transparent);
                padding-inline: 1.5rem;
                padding-block: 4rem 1rem;
                & h5 {
                    color: var(--primary);
                }
                & p {
                    color: var(--secondary);
                }
            }
        }
        @supports (container-type: scroll-state) {
            @media (prefers-reduced-motion: no-preference) {
                figcaption {
                    transform: translateY(100%);
                    @container scroll-state(snapped: x) {
                        transform: translateY(0);
                    }
                }
            }
        }
    }
}
.vcarousel {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    overflow-y: auto;
    scroll-snap-type: y mandatory;
    overscroll-behavior-y: contain;
    list-style-type: none;
    padding: 0;
    margin: 0;
}
.vcarousel li {
    scroll-snap-align: center;
}
.TabBar {
    width: 100%;
    position: relative;
    display: flex;
    gap: 10px;
    flex: 0 0 auto;
    white-space: nowrap;
    overflow-x: auto;
    overflow-y: hidden;
}
.TabButton, .TabButton:hover {
    flex: 0 0 auto;
    white-space: nowrap;
    background: none;
    z-index: 1;
}
.TabButtonActive {
    border: 1px solid purple;
}
.Tabby {
    position: absolute;
    bottom: 0;
    width: 100%;
    height: 100%;
    background: var(--primary-bg);
    border-radius: 100px;
    z-index: 0;
    transition: all 1s ease;
    overflow: hidden;
}
.HList {
    display: flex;
    padding: 0;
    overflow-x: scroll;
    scroll-snap-type: x mandatory;
    scrollbar-width: none;
    li {
        list-style-type: none;
        flex: 0 0 100%;
        scroll-snap-align: center;
    }
}
.Carousel3D {
    --items: 5;
    --position: 1;
    height: 500px;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    transform-style: preserve-3d;
    perspective: 600px;
    pointer-events: none;
    li {
        position: absolute;
        width: 300px;
        height: 400px;
        list-style: none;
        display: flex;
        background-color: coral;
        align-items: center;
        justify-content: center;
        font-size: 2rem;
        border-radius: 10px;
        box-shadow: 0 20px 50px rgba(0, 0, 0, 0.5);
        --r: calc(var(--position) - var(--offset));
        --abs: max(calc(var(--r) * -1), var(--r));
        transition: all 0.4s ease;
        transform: rotateY(calc(-10deg * var(--r)))
            translateX(calc(-300px * var(--r)));
        z-index: calc((var(--items) - var(--abs)));
    }
}
.controls {
    margin-top: 20px;
    display: flex;
    gap: 20px;
    justify-content: center;
}
.Slides {
    scroll-snap-type: y mandatory;
    overflow-y: auto;
    height: 40vh;
    section {
        display: flex;
        align-items: center;
        justify-content: center;
        container-type: scroll-state;
        scroll-snap-align: start;
        min-block-size: 40vh;
        scroll-snap-stop: always;
        @supports (container-type: scroll-state) {
            >h1 {
                transition: opacity .5s ease, transform .5s var(--ease-spring-3);
                transition-delay: .5s;
                opacity: 0;
                transform: scale(1.25);
                @container scroll-state(snapped: block) {
                    opacity: 1;
                    transform: scale(1);
                }
            }
        }
    }
    section:nth-of-type(even) {
        color: hsl(320 80% 90%);
        background: hsl(320 80% 40%);
    }
    section:nth-of-type(odd) {
        color: hsl(290 80% 90%);
        background: hsl(290 80% 40%);
    }
}
.banner {
    padding: 1rem;
    background: var(--surface-bg);
    --banner-border: var(--primary);
    border-inline-start: .25rem solid var(--banner-border);
    h5 {
        display: flex;
        gap: .5rem;
        align-items: center;
    }
    div {
        margin-top: .5rem;
    }
    ol {
        list-style: none;
        counter-reset: cupcake;
        padding-left: 16px;
    }
    ol li {
        counter-increment: cupcake;
    }
    ol li:before {
        content: counters(cupcake, '.') ' ';
        color: var(--secondary);
        font-weight: bold;
    }
    ol ol {
        padding-left: 20px;
    }
}
.GhostCon {
    --ghostWaveColor: var(--primary);
    --ghostColor: var(--primary-bg);
    --ghostEyeColor: var(--secondary);
    --ghostCircleSize: 10px;
    --ghostCircleDistance: 5px;
    --ghostCircleRadius: 11.18px;
    position: fixed;
    top: 0;
    left: 0;
    padding: 50px;
    width: 100%;
    height: 100%;
    overflow: hidden;
    pointer-events: none;
    z-index: 9999;
}
.ghost {
    background: var(--ghostColor);
    width: 120px;
    height: 150px;
    border-radius: 100px 100px 0 0;
    box-shadow: 0 0 50px var(--ghostColor);
    position: relative;
    transform-origin: center;
    animation: float 3s ease-out infinite;
}
.GhostEyes {
    display: flex;
    gap: 25px;
    padding-top: 44px;
    justify-content: center;
    position: relative;
}
.GhostEye {
    width: 10px;
    height: 16px;
    border: 6px solid var(--ghostEyeColor);
    border-radius: 100px;
    clip-path: polygon(100% 50%, 100% 100%, 0 100%, 0 50%);
    transition: .1s;
}
.ghost:hover .GhostEye,
.GhostCon.active .GhostEye {
    background: var(--ghostWaveColor);
    border-color: var(--ghostEyeColor);
    clip-path: none;
    height: 25px;
}
.GhostWaves {
    display: flex;
    position: absolute;
    bottom: -32px;
    height: 30px;
    width: 100%;
    overflow: hidden;
}
.GhostWave {
    width: 200%;
    height: 30px;
    background: var(--ghostWaveColor);
    flex-shrink: 0;
    animation: ghost-wave 3s linear infinite;
    -webkit-mask:
        radial-gradient(var(--ghostCircleRadius) at 50% calc(100% - (var(--ghostCircleSize) + var(--ghostCircleDistance))), blue 99%, #0000 101%) calc(50% - 2 * var(--ghostCircleSize)) 0/calc(4 * var(--ghostCircleSize)) 100%,
        radial-gradient(var(--ghostCircleRadius) at 50% calc(100% + var(--ghostCircleDistance)), #0000 99%, red 101%) 50% calc(100% - var(--ghostCircleSize))/calc(4 * var(--ghostCircleSize)) 100% repeat-x;
}
.GhostMouth {
    width: 44px;
    height: 8px;
    background: var(--ghostEyeColor);
    border-radius: 10px;
    margin: 16px auto 0;
    position: relative;
    animation: sleep 3s ease-out infinite;
    transition: .1s;
}
.ghost:hover .GhostMouth:before,
.GhostCon.active .GhostMouth:before {
    display: none;
}
.ghost:hover .GhostMouth,
.GhostCon.active .GhostMouth {
    animation: none;
    background: var(--ghostEyeColor);
    width: 32px;
    height: 29px;
    clip-path: polygon(100% 50%, 100% 100%, 0 100%, 0 50%);
    border-radius: 100px;
    margin-top: 1px;
}
.GhostCon.active .ghost {
    animation: none;
}
@keyframes ghost-wave {
    0% { transform: translateX(0); }
    100% { transform: translateX(-50%); }
}
@keyframes sleep {
    0% { width: 44px; }
    50% { width: 26px; }
    100% { width: 44px; }
}
@keyframes float {
    50% { transform: translate(0, 20px); }
}
.Typewriter {
    display: inline-block;
    white-space: nowrap;
    overflow: hidden;
    width: 0;
    animation-name: typing;
    animation-duration: 1.2s, 0.75s;
    animation-timing-function: steps(30, end), step-end;
    animation-fill-mode: forwards, forwards;
    animation-iteration-count: 1, 4;
}
@keyframes typing {
    from {
        width: 0;
    }
    to {
        width: 100%;
    }
}
.TerminalWindow {
    z-index: 0;
    height: 100%;
    max-height: 400px;
    width: 100%;
    max-width: 32rem;
    border-radius: 0.75rem;
    border: 1px solid var(--sterm-border-color);
    background: var(--sterm-bg-color);
    pre {
        padding: 1rem;
    }
    code {
        display: grid;
        gap: 0.25rem;
        overflow: auto;
    }
}
.TerminalHeader {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    border-bottom: 1px solid var(--sterm-border-color);
    padding: 1rem;
    div {
        display: flex;
        flex-direction: row;
        gap: 0.5rem;
        div {
            height: 0.5rem;
            width: 0.5rem;
            border-radius: 9999px;
            :nth-child(1) {
                background-color: #ef4444;
            }
            :nth-child(2) {
                background-color: #eab308;
            }
            :nth-child(3) {
                background-color: #22c55e;
            }
        }
    }
}
.TerminalLine {
    font-size: 0.875rem;
    font-weight: normal;
    letter-spacing: -0.025em;
}
.Marquee{
    display: flex;
    align-items: center;
    justify-content: flex-start;
    overflow: hidden;
    .MarqueeChild{
        text-transform: uppercase;
        will-change: transform;
        transform: translateX(0);
        white-space: nowrap;
        animation: marqueeAnim 8s linear infinite;
    }
}
@keyframes marqueeAnim {
    0% {
        transform: translateX(0);
    }
    100% {
        transform: translateX(-100%);
    }
}
.FlickerText {
    color: #3694f8;
    letter-spacing: 5px;
    animation: AnimFlicker 2s infinite alternate;
}
@keyframes AnimFlicker {
    0%,
    19%,
    21%,
    23%,
    25%,
    54%,
    56%,
    100% {
        text-shadow:
            0 0 2rem var(--flicker-shadow),
            0 0 3rem var(--flicker-shadow);
    }
    20%,
    24%,
    55% {
        text-shadow: none;
    }
}
.skeleton {
    background-color: var(--surface-bg);
    position: relative;
    overflow: hidden;
}
.skeleton::after {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    height: 100%;
    width: 100%;
    background: linear-gradient(
        90deg,
        var(--surface-bg) 0%,
        var(--surface-tint) 50%,
        var(--surface-bg) 100%
    );
    animation: shimmer 2s infinite ease-in-out;
}
@keyframes shimmer {
    100% {
        left: 100%;
    }
}
.card {
    width: 100%;
    max-width: 400px;
    color: var(--primary-bg);
    background: var(--primary);
    border-radius: 16px;
    padding: 2rem;
    position: relative;
    overflow: hidden;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    transform-style: preserve-3d;
    transform: perspective(1000px);
    transition: all 0.3s ease;
}
.card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg,
        var(--primary),
        var(--secondary));
    z-index: -1;
    opacity: 0;
    transition: opacity 0.3s ease;
}
.card:hover {
    transform: perspective(1000px) translateZ(20px);
}
.card:hover::before {
    opacity: 1;
}
.title {
    font-size: 1.8rem;
    margin-bottom: 1rem;
    background: linear-gradient(to right, #fff, #ccc);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
}
.card .description {
    line-height: 1.6;
    margin-bottom: 2rem;
}
.stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    padding-top: 1.5rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
}
.stat {
    text-align: center;
}
.stat-value {
    font-size: 1.2rem;
    font-weight: 600;
    margin-bottom: 0.3rem;
}
.stat-label {
    font-size: 0.8rem;
    text-transform: uppercase;
}
.Rainbow {
    background: linear-gradient(to right,
            blueviolet,
            lawngreen,
            red,
            yellow,
            deepskyblue);
    -webkit-background-clip: text;
    color: transparent;
    animation: AnimRainbow 6s ease-in-out infinite;
    background-size: 400% 100%;
}
@keyframes AnimRainbow {
    0%,
    100% {
        background-position: 0 0;
    }
    50% {
        background-position: 100% 0;
    }
}
.Raincon {
    background-image: var(--rainsrc);
    -webkit-mask-image: var(--rainsrc);
    -webkit-mask-size: cover;
    background-size: var(--rainsize);
    width: var(--rainsize);
    height: var(--rainsize);
    display: inline-block;
}
.RainconGrad {
    background-image: linear-gradient(-45deg,
            #ee76526e,
            #e73c7e9a,
            #e1e73c9a,
            #23a5d59a,
            #23d5ab9a);
    background-size: 400%;
    background-repeat: no-repeat;
    animation: AnimRaincon 5s ease infinite;
    width: inherit;
    height: inherit;
}
@keyframes AnimRaincon {
    0% {
        background-position: 0% 50%;
    }
    50% {
        background-position: 100% 50%;
    }
    100% {
        background-position: 0% 50%;
    }
}
.TreeView {
    list-style: none;
    margin: 0;
    padding: 0;
    display: inline-flex;
    flex-direction: column;
    user-select: none;
}
.TreeItem {
    display: flex;
    flex-direction: column;
    cursor: pointer;
    [aria-level]:not([aria-level="0"]) {
        padding-left: 1rem;
    }
}
.TreeHeader {
    overflow-x: clip;
    display: flex;
    align-items: start;
    background: var(--surface-bg);
    color: var(--primary);
    padding: 0.25rem;
}
.TreeHeader:hover {
    color: var(--secondary);
    background: var(--secondary-bg);
}
.TreeActive {
    background: var(--primary-bg);
    color: var(--primary);
}
.TreeToggle {
    padding: 0rem .3rem;
    transition: all .3s ease;
}
.TreeToggleOpen {
    transform: rotate(90deg);
}
.TreeContent {
    max-height: 0;
    overflow: hidden;
    transition: all 0.2s ease-out;
    opacity: 0;
    user-select: text;
    cursor: text;
}
.TabsLevels {
    display: flex;
    flex-direction: column;
}
.TabLevel {
    display: flex;
    flex-direction: row;
    align-self: start;
}
.TabContent {
    flex: 1;
    overflow: auto;
}
.Breadcrumb {
    padding: 0.75rem 1.25rem;
}
.BreadcrumbLinks {
    list-style-type: none;
    display: flex;
    align-items: center;
    margin: 0;
    padding: 0;
    li {
        display: flex;
    }
}
.BreadcrumbLink {
    color: var(--primary);
    text-decoration: none;
    transition: color 0.2s;
}
.BreadcrumbLink:hover {
    color: var(--secondary);
}
.BreadcrumbSeparator {
    color: var(--primary);
    margin: 0 0.5rem;
}
.HeaderNav {
    margin: 0 auto;
    padding: .4rem 1rem;
    display: flex;
    align-items: center;
    max-height: 3rem;
    justify-content: space-between;
}
.HeaderLeft {
    a {
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 1rem;
    }
    img {
        height: 2.4rem;
    }
    p {
        font-size: 1.1rem;
    }
}
.HeaderLinks {
    display: flex;
    align-items: center;
    gap: 2rem;
}
.HeaderRight {
    display: flex;
    align-items: center;
}
@media (min-width: 1024px) {
    .HeaderRight {
        gap: 0.5rem;
    }
}
.BottomBar {
    display: flex;
    justify-content: space-around;
    align-items: center;
    height: 64px;
    background-color: var(--color-white);
    border-top: 1px solid var(--color-border);
}
.BottomBarItem {
}
.MobileHeader {
    padding: 16px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}
.ModalOverlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 1;
    z-index: 50;
    pointer-events: none;
}
.ModalContent {
    background: var(--modal-bg);
    color: var(--modal-col);
    border-radius: 0.5rem;
    overflow-y: auto;
    pointer-events: none;
    position: fixed;
    inset: var(--ModalFullScreen);
    max-width: 100%;
    max-height: 100%;
    transform-origin: center;
    transform: translateY(10px);
    opacity: 0;
}
.ModalContentShow {
    pointer-events: auto;
    transform: translateY(0px);
    opacity: 1;
    transition: all 0.4s ease-in-out;
}
::-webkit-scrollbar {
  height: 8px;
  width: 7px;
}
::-webkit-scrollbar-track {
  background: var(--surface-bg);
}
::-webkit-scrollbar-track:hover {
}
::-webkit-scrollbar-thumb {
  border-radius: 20px;
  background: var(--primary-bg);
}
*:hover::-webkit-scrollbar-thumb {
}
* {
  scroll-behavior: smooth;
  margin: 0;
}
*,
*::before,
*::after {
  box-sizing: border-box;
}
body {
  background: var(--body-bg);
  color: var(--body);
  align-items: center;
  justify-content: center;
  height: 100vh;
  min-height: 100vh;
  padding: 0px;
  margin: 0px;
  font-family: monospace, Inter, ui-sans-serif, system-ui;
  -webkit-font-smoothing: antialiased;
  line-height: 1.5;
  place-content: center;
}
@media (prefers-reduced-motion: no-preference) {
    html {
        interpolate-size: allow-keywords;
    }
}
input,
textarea,
select {
  font: inherit;
}
p,h1,h2,h3,h4,h5,h6 {
  overflow-wrap: break-word;
}
h1,h2,h3,h4,h5,h6 {
  text-wrap: balance;
}
#root,
#__next {
  isolation: isolate;
}
h1 {
  font-size: calc(var(--spacing) * 2.5);
  font-weight: 700;
  line-height: calc(var(--spacing) * 2);
  letter-spacing: -0.04rem;
  word-spacing: -0.4rem;
}
h2 {
  font-size: calc(var(--spacing) * 2.25);
  font-weight: 600;
  line-height: calc(var(--spacing) * 1.75);
  letter-spacing: -0.035rem;
  word-spacing: -0.3rem;
}
h3 {
  font-size: calc(var(--spacing) * 2);
  font-weight: 500;
  line-height: calc(var(--spacing) * 1.75);
  letter-spacing: -0.03rem;
  word-spacing: -0.25rem;
}
h4 {
  font-size: calc(var(--spacing) * 1.5);
  font-weight: 400;
  line-height: calc(var(--spacing) * 1.5);
  letter-spacing: -0.025rem;
  word-spacing: -0.15rem;
}
h5 {
  font-size: calc(var(--spacing) * 1.25);
  font-weight: 300;
  line-height: calc(var(--spacing) * 1.25);
  letter-spacing: -0.015rem;
  word-spacing: -0.25rem;
}
h6 {
  font-size: calc(var(--spacing) * 1.1);
  font-weight: 300;
  line-height: calc(var(--spacing) * 1.25);
  letter-spacing: -0.01rem;
  word-spacing: -0.05rem;
}
p,
li {
  text-wrap: pretty;
  font-size: var(--spacing);
  line-height: calc(var(--spacing) * 1.25);
  letter-spacing: -0.01rem;
  word-spacing: -0.05rem;
}
a {
  color: var(--primary);
  text-decoration: none;
  :hover {
    color: var(--a-hover-col);
  }
  :active, .active {
    color: var(--a-active-col);
  }
}
label {
  color: color-mix(in srgb, currentColor 75%, transparent);
  background: transparent;
  font-size: 0.875rem;
  line-height: 1.25rem;
  font-weight: 500;
  user-select: none;
  padding: 0.25rem;
}
label[aria-disabled="true"] {
  color: var(--disabled);
  cursor: not-allowed;
  opacity: 0.75;
}
pre {
  white-space: pre-wrap;
  font-family: monospace;
}
@media (min-width: 768px) {
}
@media (min-width: 1024px) {}
.flex { display: flex; }
.flex-row { flex-direction: row; }
.flex-col { flex-direction: column; }
.flex-wrap { flex-wrap: wrap; }
.flex-nowrap { flex-wrap: nowrap; }
.items-start { align-items: flex-start; }
.items-end { align-items: flex-end; }
.items-center { align-items: center; }
.items-baseline { align-items: baseline; }
.items-stretch { align-items: stretch; }
.justify-start { justify-content: flex-start; }
.justify-end { justify-content: flex-end; }
.justify-center { justify-content: center; }
.space-between { justify-content: space-between; }
.space-around { justify-content: space-around; }
.space-evenly { justify-content: space-evenly; }
.w-full { width: 100%; }
.w-screen { width: 100vw; }
.h-full { height: 100%; }
.h-screen { height: 100vh; }
.text-left { text-align: left; }
.text-center { text-align: center; }
.text-right { text-align: right; }
.text0 { font-size: var(--spacing); }
.text1 { font-size: calc(var(--spacing) * 2); }
.text2 { font-size: calc(var(--spacing) * 1.75); }
.text3 { font-size: calc(var(--spacing) * 1.5); }
.text4 { font-size: calc(var(--spacing) * 1.4); }
.text5 { font-size: calc(var(--spacing) * 1.25); }
.text6 { font-size: calc(var(--spacing) * 1.1); }
.p0 { padding: var(--size-0); }
.p1 { padding: var(--size-1); }
.p2 { padding: var(--size-2); }
.p4 { padding: var(--size-4); }
.p8 { padding: var(--size-8); }
.p16 { padding: var(--size-16); }
.pt0 { padding-top: var(--size-0); }
.pt1 { padding-top: var(--size-1); }
.pt2 { padding-top: var(--size-2); }
.pt4 { padding-top: var(--size-4); }
.pt8 { padding-top: var(--size-8); }
.pt16 { padding-top: var(--size-16); }
.pb0 { padding-bottom: var(--size-0); }
.pb1 { padding-bottom: var(--size-1); }
.pb2 { padding-bottom: var(--size-2); }
.pb4 { padding-bottom: var(--size-4); }
.pb8 { padding-bottom: var(--size-8); }
.pb16 { padding-bottom: var(--size-16); }
.pl0 { padding-left: var(--size-0); }
.pl1 { padding-left: var(--size-1); }
.pl2 { padding-left: var(--size-2); }
.pl4 { padding-left: var(--size-4); }
.pl8 { padding-left: var(--size-8); }
.pl16 { padding-left: var(--size-16); }
.pr0 { padding-right: var(--size-0); }
.pr1 { padding-right: var(--size-1); }
.pr2 { padding-right: var(--size-2); }
.pr4 { padding-right: var(--size-4); }
.pr8 { padding-right: var(--size-8); }
.pr16 { padding-right: var(--size-16); }
.py0 { padding-top: var(--size-0); padding-bottom: var(--size-0); }
.py1 { padding-top: var(--size-1); padding-bottom: var(--size-1); }
.py2 { padding-top: var(--size-2); padding-bottom: var(--size-2); }
.py4 { padding-top: var(--size-4); padding-bottom: var(--size-4); }
.py8 { padding-top: var(--size-8); padding-bottom: var(--size-8); }
.py16 { padding-top: var(--size-16); padding-bottom: var(--size-16); }
.px0 { padding-left: var(--size-0); padding-right: var(--size-0); }
.px1 { padding-left: var(--size-1); padding-right: var(--size-1); }
.px2 { padding-left: var(--size-2); padding-right: var(--size-2); }
.px4 { padding-left: var(--size-4); padding-right: var(--size-4); }
.px8 { padding-left: var(--size-8); padding-right: var(--size-8); }
.px16 { padding-left: var(--size-16); padding-right: var(--size-16); }
.m0 { margin: var(--size-0); }
.m1 { margin: var(--size-1); }
.m2 { margin: var(--size-2); }
.m4 { margin: var(--size-4); }
.m8 { margin: var(--size-8); }
.m16 { margin: var(--size-16); }
.mt0 { margin-top: var(--size-0); }
.mt1 { margin-top: var(--size-1); }
.mt2 { margin-top: var(--size-2); }
.mt4 { margin-top: var(--size-4); }
.mt8 { margin-top: var(--size-8); }
.mt16 { margin-top: var(--size-16); }
.mb0 { margin-bottom: var(--size-0); }
.mb1 { margin-bottom: var(--size-1); }
.mb2 { margin-bottom: var(--size-2); }
.mb4 { margin-bottom: var(--size-4); }
.mb8 { margin-bottom: var(--size-8); }
.mb16 { margin-bottom: var(--size-16); }
.ml0 { margin-left: var(--size-0); }
.ml1 { margin-left: var(--size-1); }
.ml2 { margin-left: var(--size-2); }
.ml4 { margin-left: var(--size-4); }
.ml8 { margin-left: var(--size-8); }
.ml16 { margin-left: var(--size-16); }
.mr0 { margin-right: var(--size-0); }
.mr1 { margin-right: var(--size-1); }
.mr2 { margin-right: var(--size-2); }
.mr4 { margin-right: var(--size-4); }
.mr8 { margin-right: var(--size-8); }
.mr16 { margin-right: var(--size-16); }
.mt0.mb0 { margin-top: var(--size-0); margin-bottom: var(--size-0); }
.mt1.mb1 { margin-top: var(--size-1); margin-bottom: var(--size-1); }
.mt2.mb2 { margin-top: var(--size-2); margin-bottom: var(--size-2); }
.mt4.mb4 { margin-top: var(--size-4); margin-bottom: var(--size-4); }
.mt8.mb8 { margin-top: var(--size-8); margin-bottom: var(--size-8); }
.mt16.mb16 { margin-top: var(--size-16); margin-bottom: var(--size-16); }
.ml0.mr0 { margin-left: var(--size-0); margin-right: var(--size-0); }
.ml1.mr1 { margin-left: var(--size-1); margin-right: var(--size-1); }
.ml2.mr2 { margin-left: var(--size-2); margin-right: var(--size-2); }
.ml4.mr4 { margin-left: var(--size-4); margin-right: var(--size-4); }
.ml8.mr8 { margin-left: var(--size-8); margin-right: var(--size-8); }
.ml16.mr16 { margin-left: var(--size-16); margin-right: var(--size-16); }
.gap0 { gap: var(--size-0); }
.gap1 { gap: var(--size-1); }
.gap2 { gap: var(--size-2); }
.gap4 { gap: var(--size-4); }
.gap8 { gap: var(--size-8); }
.gap16 { gap: var(--size-16); }
.br0 { border-radius: var(--size-0); }
.br1 { border-radius: var(--size-1); }
.br2 { border-radius: var(--size-2); }
.br4 { border-radius: var(--size-4); }
.br8 { border-radius: var(--size-8); }
.br16 { border-radius: var(--size-16); }
.noline { text-decoration: none; }
.underline { text-decoration: underline; }
.line { text-decoration: line-through; }
.overline { text-decoration: overline; }
.bold { font-weight: bold; }
.f100 { font-weight: 100; }
.f200 { font-weight: 200; }
.f300 { font-weight: 300; }
.f400 { font-weight: 400; }
.f500 { font-weight: 500; }
.f600 { font-weight: 600; }
.f700 { font-weight: 700; }
.f800 { font-weight: 800; }
.f900 { font-weight: 900; }
.border-basic { border: 1px solid var(--primary);}
.border-0 { border-width: 0; }
.border-1 { border-width: 1px; }
.border-2 { border-width: 2px; }
.border-4 { border-width: 4px; }
.border-8 { border-width: 8px; }
.border-solid { border-style: solid; }
.border-dashed { border-style: dashed; }
.border-dotted { border-style: dotted; }
.border-double { border-style: double; }
.border-none { border-style: none; }
.border-primary { border-color: var(--primary); }
.border-secondary { border-color: var(--secondary); }
.shadowm {
  --shadow-color: 0deg 0% 79%;
  box-shadow:
    0px 0.1px 0.2px hsl(var(--shadow-color) / 0),
    0px 0.4px 0.6px hsl(var(--shadow-color) / 0.09),
    0px 0.7px 1px hsl(var(--shadow-color) / 0.18),
    0px 1.4px 2.1px hsl(var(--shadow-color) / 0.26);
}
.shadowh {
  --shadow-color: 0deg 0% 79%;
  box-shadow:
    0px 0.1px 0.1px hsl(var(--shadow-color) / 0.07),
    0px 0.4px 0.5px -0.1px hsl(var(--shadow-color) / 0.09),
    0px 0.8px 1.1px -0.3px hsl(var(--shadow-color) / 0.11),
    0px 1.1px 1.5px -0.4px hsl(var(--shadow-color) / 0.14),
    0px 1.6px 2.2px -0.6px hsl(var(--shadow-color) / 0.16),
    0px 2.3px 3.1px -0.7px hsl(var(--shadow-color) / 0.19),
    0px 3.3px 4.5px -0.9px hsl(var(--shadow-color) / 0.21),
    0px 4.6px 6.2px -1px hsl(var(--shadow-color) / 0.24);
}
.pri { color: var(--primary); background: var(--primary-bg); }
.revpri { color: var(--primary-bg); background: var(--primary); }
.sec { color: var(--secondary); background: var(--secondary-bg); }
.revsec { color: var(--secondary-bg); background: var(--secondary); }
.surface { color: var(--surface); background: var(--surface-bg); }
.revsurface { color: var(--surface-bg); background: var(--surface); }
@keyframes fade-in {
    to {
        opacity: 1
    }
}
@keyframes fade-in-bloom {
    0% {
        filter: brightness(1) blur(20px);
        opacity: 0
    }
    10% {
        filter: brightness(2) blur(10px);
        opacity: 1
    }
    to {
        filter: brightness(1) blur(0);
        opacity: 1
    }
}
@keyframes fade-out {
    to {
        opacity: 0
    }
}
@keyframes fade-out-bloom {
    to {
        filter: brightness(1) blur(20px);
        opacity: 0
    }
    10% {
        filter: brightness(2) blur(10px);
        opacity: 1
    }
    0% {
        filter: brightness(1) blur(0);
        opacity: 1
    }
}
@keyframes scale-up {
    to {
        transform: scale(1.25)
    }
}
@keyframes scale-down {
    to {
        transform: scale(.75)
    }
}
@keyframes slide-out-up {
    to {
        transform: translateY(-100%)
    }
}
@keyframes slide-out-down {
    to {
        transform: translateY(100%)
    }
}
@keyframes slide-out-right {
    to {
        transform: translateX(100%)
    }
}
@keyframes slide-out-left {
    to {
        transform: translateX(-100%)
    }
}
@keyframes slide-in-up {
    0% {
        transform: translateY(100%)
    }
}
@keyframes slide-in-down {
    0% {
        transform: translateY(-100%)
    }
}
@keyframes slide-in-right {
    0% {
        transform: translateX(-100%)
    }
}
@keyframes slide-in-left {
    0% {
        transform: translateX(100%)
    }
}
@keyframes shake-x {
    0%,
    to {
        transform: translateX(0)
    }
    20% {
        transform: translateX(-5%)
    }
    40% {
        transform: translateX(5%)
    }
    60% {
        transform: translateX(-5%)
    }
    80% {
        transform: translateX(5%)
    }
}
@keyframes shake-y {
    0%,
    to {
        transform: translateY(0)
    }
    20% {
        transform: translateY(-5%)
    }
    40% {
        transform: translateY(5%)
    }
    60% {
        transform: translateY(-5%)
    }
    80% {
        transform: translateY(5%)
    }
}
@keyframes shake-z {
    0%,
    to {
        transform: rotate(0deg)
    }
    20% {
        transform: rotate(-2deg)
    }
    40% {
        transform: rotate(2deg)
    }
    60% {
        transform: rotate(-2deg)
    }
    80% {
        transform: rotate(2deg)
    }
}
@keyframes spin {
    to {
        transform: rotate(1turn)
    }
}
@keyframes ping {
    90%,
    to {
        opacity: 0;
        transform: scale(2)
    }
}
@keyframes blink {
    0%,
    to {
        opacity: 1
    }
    50% {
        opacity: .5
    }
}
@keyframes float {
    50% {
        transform: translateY(-25%)
    }
}
@keyframes bounce {
    25% {
        transform: translateY(-20%)
    }
    40% {
        transform: translateY(-3%)
    }
    0%,
    60%,
    to {
        transform: translateY(0)
    }
}
@keyframes pulse {
    50% {
        transform: scale(.9)
    }
}
:root {
    --ease-1: cubic-bezier(.25, 0, .5, 1);
    --ease-2: cubic-bezier(.25, 0, .4, 1);
    --ease-3: cubic-bezier(.25, 0, .3, 1);
    --ease-4: cubic-bezier(.25, 0, .2, 1);
    --ease-5: cubic-bezier(.25, 0, .1, 1);
    --ease-in-1: cubic-bezier(.25, 0, 1, 1);
    --ease-in-2: cubic-bezier(.50, 0, 1, 1);
    --ease-in-3: cubic-bezier(.70, 0, 1, 1);
    --ease-in-4: cubic-bezier(.90, 0, 1, 1);
    --ease-in-5: cubic-bezier(1, 0, 1, 1);
    --ease-out-1: cubic-bezier(0, 0, .75, 1);
    --ease-out-2: cubic-bezier(0, 0, .50, 1);
    --ease-out-3: cubic-bezier(0, 0, .3, 1);
    --ease-out-4: cubic-bezier(0, 0, .1, 1);
    --ease-out-5: cubic-bezier(0, 0, 0, 1);
    --ease-in-out-1: cubic-bezier(.1, 0, .9, 1);
    --ease-in-out-2: cubic-bezier(.3, 0, .7, 1);
    --ease-in-out-3: cubic-bezier(.5, 0, .5, 1);
    --ease-in-out-4: cubic-bezier(.7, 0, .3, 1);
    --ease-in-out-5: cubic-bezier(.9, 0, .1, 1);
    --ease-elastic-out-1: cubic-bezier(.5, .75, .75, 1.25);
    --ease-elastic-out-2: cubic-bezier(.5, 1, .75, 1.25);
    --ease-elastic-out-3: cubic-bezier(.5, 1.25, .75, 1.25);
    --ease-elastic-out-4: cubic-bezier(.5, 1.5, .75, 1.25);
    --ease-elastic-out-5: cubic-bezier(.5, 1.75, .75, 1.25);
    --ease-elastic-in-1: cubic-bezier(.5, -0.25, .75, 1);
    --ease-elastic-in-2: cubic-bezier(.5, -0.50, .75, 1);
    --ease-elastic-in-3: cubic-bezier(.5, -0.75, .75, 1);
    --ease-elastic-in-4: cubic-bezier(.5, -1.00, .75, 1);
    --ease-elastic-in-5: cubic-bezier(.5, -1.25, .75, 1);
    --ease-elastic-in-out-1: cubic-bezier(.5, -.1, .1, 1.5);
    --ease-elastic-in-out-2: cubic-bezier(.5, -.3, .1, 1.5);
    --ease-elastic-in-out-3: cubic-bezier(.5, -.5, .1, 1.5);
    --ease-elastic-in-out-4: cubic-bezier(.5, -.7, .1, 1.5);
    --ease-elastic-in-out-5: cubic-bezier(.5, -.9, .1, 1.5);
    --ease-step-1: steps(2);
    --ease-step-2: steps(3);
    --ease-step-3: steps(4);
    --ease-step-4: steps(7);
    --ease-step-5: steps(10);
    --ease-elastic-1: var(--ease-elastic-out-1);
    --ease-elastic-2: var(--ease-elastic-out-2);
    --ease-elastic-3: var(--ease-elastic-out-3);
    --ease-elastic-4: var(--ease-elastic-out-4);
    --ease-elastic-5: var(--ease-elastic-out-5);
    --ease-squish-1: var(--ease-elastic-in-out-1);
    --ease-squish-2: var(--ease-elastic-in-out-2);
    --ease-squish-3: var(--ease-elastic-in-out-3);
    --ease-squish-4: var(--ease-elastic-in-out-4);
    --ease-squish-5: var(--ease-elastic-in-out-5);
    --ease-spring-1: linear(0, 0.006, 0.025 2.8%, 0.101 6.1%, 0.539 18.9%, 0.721 25.3%, 0.849 31.5%, 0.937 38.1%, 0.968 41.8%, 0.991 45.7%, 1.006 50.1%, 1.015 55%, 1.017 63.9%, 1.001);
    --ease-spring-2: linear(0, 0.007, 0.029 2.2%, 0.118 4.7%, 0.625 14.4%, 0.826 19%, 0.902, 0.962, 1.008 26.1%, 1.041 28.7%, 1.064 32.1%, 1.07 36%, 1.061 40.5%, 1.015 53.4%, 0.999 61.6%, 0.995 71.2%, 1);
    --ease-spring-3: linear(0, 0.009, 0.035 2.1%, 0.141 4.4%, 0.723 12.9%, 0.938 16.7%, 1.017, 1.077, 1.121, 1.149 24.3%, 1.159, 1.163, 1.161, 1.154 29.9%, 1.129 32.8%, 1.051 39.6%, 1.017 43.1%, 0.991, 0.977 51%, 0.974 53.8%, 0.975 57.1%, 0.997 69.8%, 1.003 76.9%, 1);
    --ease-spring-4: linear(0, 0.009, 0.037 1.7%, 0.153 3.6%, 0.776 10.3%, 1.001, 1.142 16%, 1.185, 1.209 19%, 1.215 19.9% 20.8%, 1.199, 1.165 25%, 1.056 30.3%, 1.008 33%, 0.973, 0.955 39.2%, 0.953 41.1%, 0.957 43.3%, 0.998 53.3%, 1.009 59.1% 63.7%, 0.998 78.9%, 1);
    --ease-spring-5: linear(0, 0.01, 0.04 1.6%, 0.161 3.3%, 0.816 9.4%, 1.046, 1.189 14.4%, 1.231, 1.254 17%, 1.259, 1.257 18.6%, 1.236, 1.194 22.3%, 1.057 27%, 0.999 29.4%, 0.955 32.1%, 0.942, 0.935 34.9%, 0.933, 0.939 38.4%, 1 47.3%, 1.011, 1.017 52.6%, 1.016 56.4%, 1 65.2%, 0.996 70.2%, 1.001 87.2%, 1);
    --ease-bounce-1: linear(0, 0.004, 0.016, 0.035, 0.063, 0.098, 0.141, 0.191, 0.25, 0.316, 0.391 36.8%, 0.563, 0.766, 1 58.8%, 0.946, 0.908 69.1%, 0.895, 0.885, 0.879, 0.878, 0.879, 0.885, 0.895, 0.908 89.7%, 0.946, 1);
    --ease-bounce-2: linear(0, 0.004, 0.016, 0.035, 0.063, 0.098, 0.141 15.1%, 0.25, 0.391, 0.562, 0.765, 1, 0.892 45.2%, 0.849, 0.815, 0.788, 0.769, 0.757, 0.753, 0.757, 0.769, 0.788, 0.815, 0.85, 0.892 75.2%, 1 80.2%, 0.973, 0.954, 0.943, 0.939, 0.943, 0.954, 0.973, 1);
    --ease-bounce-3: linear(0, 0.004, 0.016, 0.035, 0.062, 0.098, 0.141 11.4%, 0.25, 0.39, 0.562, 0.764, 1 30.3%, 0.847 34.8%, 0.787, 0.737, 0.699, 0.672, 0.655, 0.65, 0.656, 0.672, 0.699, 0.738, 0.787, 0.847 61.7%, 1 66.2%, 0.946, 0.908, 0.885 74.2%, 0.879, 0.878, 0.879, 0.885 79.5%, 0.908, 0.946, 1 87.4%, 0.981, 0.968, 0.96, 0.957, 0.96, 0.968, 0.981, 1);
    --ease-bounce-4: linear(0, 0.004, 0.016 3%, 0.062, 0.141, 0.25, 0.391, 0.562 18.2%, 1 24.3%, 0.81, 0.676 32.3%, 0.629, 0.595, 0.575, 0.568, 0.575, 0.595, 0.629, 0.676 48.2%, 0.811, 1 56.2%, 0.918, 0.86, 0.825, 0.814, 0.825, 0.86, 0.918, 1 77.2%, 0.94 80.6%, 0.925, 0.92, 0.925, 0.94 87.5%, 1 90.9%, 0.974, 0.965, 0.974, 1);
    --ease-bounce-5: linear(0, 0.004, 0.016 2.5%, 0.063, 0.141, 0.25 10.1%, 0.562, 1 20.2%, 0.783, 0.627, 0.534 30.9%, 0.511, 0.503, 0.511, 0.534 38%, 0.627, 0.782, 1 48.7%, 0.892, 0.815, 0.769 56.3%, 0.757, 0.753, 0.757, 0.769 61.3%, 0.815, 0.892, 1 68.8%, 0.908 72.4%, 0.885, 0.878, 0.885, 0.908 79.4%, 1 83%, 0.954 85.5%, 0.943, 0.939, 0.943, 0.954 90.5%, 1 93%, 0.977, 0.97, 0.977, 1);
    --animation-fade-in: fade-in .5s var(--ease-3);
    --animation-fade-in-bloom: fade-in-bloom 2s var(--ease-3);
    --animation-fade-out: fade-out .5s var(--ease-3);
    --animation-fade-out-bloom: fade-out-bloom 2s var(--ease-3);
    --animation-scale-up: scale-up .5s var(--ease-3);
    --animation-scale-down: scale-down .5s var(--ease-3);
    --animation-slide-out-up: slide-out-up .5s var(--ease-3);
    --animation-slide-out-down: slide-out-down .5s var(--ease-3);
    --animation-slide-out-right: slide-out-right .5s var(--ease-3);
    --animation-slide-out-left: slide-out-left .5s var(--ease-3);
    --animation-slide-in-up: slide-in-up .5s var(--ease-3);
    --animation-slide-in-down: slide-in-down .5s var(--ease-3);
    --animation-slide-in-right: slide-in-right .5s var(--ease-3);
    --animation-slide-in-left: slide-in-left .5s var(--ease-3);
    --animation-shake-x: shake-x .75s var(--ease-out-5);
    --animation-shake-y: shake-y .75s var(--ease-out-5);
    --animation-shake-z: shake-z 1s var(--ease-in-out-3);
    --animation-spin: spin 2s linear infinite;
    --animation-ping: ping 5s var(--ease-out-3) infinite;
    --animation-blink: blink 1s var(--ease-out-3) infinite;
    --animation-float: float 3s var(--ease-in-out-3) infinite;
    --animation-bounce: bounce 2s var(--ease-squish-2) infinite;
    --animation-pulse: pulse 2s var(--ease-out-3) infinite;
}
@keyframes jello {
    0%   { transform: scale3d(1, 1, 1); }
    30%  { transform: scale3d(1.25, 0.75, 1); }
    40%  { transform: scale3d(0.75, 1.25, 1); }
    50%  { transform: scale3d(1.15, 0.85, 1); }
    65%  { transform: scale3d(0.95, 1.05, 1); }
    75%  { transform: scale3d(1.05, 0.95, 1); }
    100% { transform: scale3d(1, 1, 1); }
}
.animate-jello {
    animation: jello 1s ease;
}

/*
src/position.tsx
src/gridlayout.tsx
src/accordion.tsx
src/dropdown.tsx
src/bar.tsx
src/button.tsx
src/input.tsx
*/

.light {
    --DropdownHeader-col: #9c40ca;
    --DropdownHeader-bg: #cfcfcf;
    --DropdownHeader-border: none;
    --DropdownItem-col: #343434;
    --DropdownItem-bg: #ebebeb;
    --DropdownItem-border: none;
    --DropdownItem-col-hover: #d4d4d4;
    --DropdownItem-bg-hover: #6b6b6b;
    --icon-bg: var(--surface);
    --icon-border-radius: 100rem;
    --icon-hover-bg: var(--primary-container);
    --mat-color: var(--primary);
    --mat-bg: var(--primary-container);
    --mat-border: 1px solid transparent;
    --mat-hover-color: var(--primary);
    --mat-hover-bg: var(--primary-container);
    --out-color: var(--primary);
    --out-bg: transparent;
    --out-border: 1px solid var(--primary-border);
    --out-hover-color: var(--primary);
    --out-hover-bg: var(--primary-container);
    --icon-border: 1px solid transparent;
    --input-accent-color: var(--primary);
    --label-transform-x: 0.6rem;
    --label-transform-y: -1.0rem;
    --label-scale: 0.85;
    --input-label-focus-color: var(--primary);
    --input-label-focus-bg: var(--surface);
    --input-bg: #ffffff;
    --Input-label-border: 1px solid transparent;
}

.night {
    --DropdownHeader-col: #8a87e3;
    --DropdownHeader-bg: #454545;
    --DropdownHeader-border: none;
    --DropdownItem-col: #f8f8f8;
    --DropdownItem-bg: #4f4f4f;
    --DropdownItem-border: none;
    --DropdownItem-col-hover: #4b4b4b;
    --DropdownItem-bg-hover: #d7d7d7;
    --icon-bg: var(--surface);
    --icon-border-radius: 100rem;
    --icon-hover-bg: var(--primary-container);
    --mat-color: var(--primary);
    --mat-bg: var(--primary-container);
    --mat-border: 1px solid transparent;
    --mat-hover-color: var(--primary);
    --mat-hover-bg: var(--primary-container);
    --out-color: var(--primary);
    --out-bg: transparent;
    --out-border: 1px solid var(--primary-border);
    --out-hover-color: var(--primary);
    --out-hover-bg: var(--primary-container);
    --icon-border: 1px solid transparent;
    --input-accent-color: var(--primary);
    --label-transform-x: 0.6rem;
    --label-transform-y: -1.0rem;
    --label-scale: 0.85;
    --input-label-focus-color: var(--primary);
    --input-label-focus-bg: var(--surface);
    --input-bg: #3b3b3b;
    --Input-label-border: 1px solid transparent;
}

.DragBox {
    position: fixed;
    inset: 0px;
    background-color: #e7e7e727;
    pointer-events: none;
}

.DragBox>div {
    display: flex;
    padding: 1rem;
    justify-content: center;
    align-items: center;
    width: 10rem;
    height: 10rem;
    color: #ffffff;
    background-color: #ff3fc2d6;
    cursor: move;
    pointer-events: auto;
}

.GridLayout {
    width: 100%;
    height: 100vh;
    display: grid;
    gap: .1rem;
}

.GridLayoutFixed {
    grid-template-areas: "header  header  header"
        "left   middle  right"
        "footer footer  footer";
    grid-template-columns: minmax(200px, 15%) 1fr minmax(200px, 15%);
    grid-template-rows: auto 1fr auto;
}

.GridLayoutFixed:not(:has(>.GridLeft)):not(:has(>.GridRight)) {
    grid-template-columns: 1fr;
    grid-template-areas: "header"
        "middle"
        "footer";
}

.GridLayoutFixed:not(:has(>.GridLeft)):has(>.GridRight) {
    grid-template-columns: 1fr minmax(200px, 15%);
    grid-template-areas: "header  header"
        "middle  right"
        "footer  footer";
}

.GridLayoutFixed:has(>.GridLeft):not(:has(>.GridRight)) {
    grid-template-columns: minmax(200px, 15%) 1fr;
    grid-template-areas: "header header"
        "left   middle"
        "footer footer";
}

.GridLayoutScroll {
    grid-template-areas: "left middle right";
    grid-template-columns: minmax(200px, 15%) 1fr minmax(200px, 15%);
}

.GridLayoutScroll:not(:has(>.GridLeft)):not(:has(>.GridRight)) {
    grid-template-columns: 1fr;
    grid-template-areas: "middle";
}

.GridLayoutScroll:not(:has(>.GridLeft)):has(>.GridRight) {
    grid-template-columns: 1fr minmax(200px, 15%);
    grid-template-areas: "middle right";
}

.GridLayoutScroll:has(>.GridLeft):not(:has(>.GridRight)) {
    grid-template-columns: minmax(200px, 15%) 1fr;
    grid-template-areas: "left middle";
}

.GridHeader {
    grid-area: header;
}

.GridFooter {
    grid-area: footer;
}

.GridLeft {
    grid-area: left;
    overflow-y: auto;
    border-right: 1px solid var(--border-color, #e5e7eb);
}

.GridRight {
    grid-area: right;
    overflow-y: auto;
    border-left: 1px solid var(--border-color, #e5e7eb);
}

.GridMiddle {
    grid-area: middle;
    overflow-y: auto;
}

.GridScrollContainer {
    display: flex;
    flex-direction: column;
    min-height: 100%;
}

.GridContent {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
}

.GridLayoutFlow {
    grid-template-areas: "header header header"
        "left  middle right";
    grid-template-columns: minmax(200px, 15%) 1fr minmax(200px, 15%);
}

.GridLayoutFlow:not(:has(>.GridLeft)):not(:has(>.GridRight)) {
    grid-template-columns: 1fr;
    grid-template-areas: "header"
        "middle";
}

.GridLayoutFlow:not(:has(>.GridLeft)):has(>.GridRight) {
    grid-template-columns: 1fr minmax(200px, 15%);
    grid-template-areas: "header header"
        "middle right";
}

.GridLayoutFlow:has(>.GridLeft):not(:has(>.GridRight)) {
    grid-template-columns: minmax(200px, 15%) 1fr;
    grid-template-areas: "header header"
        "left  middle";
}

.GridLayoutFlow .GridLeft,
.GridLayoutFlow .GridRight {
    position: static;
    height: auto;
    padding-top: 1rem;
    border: none;
    border-right: 1px solid var(--border-color, #e5e7eb);
    overflow: visible;
}

.GridLayoutFlow .GridRight {
    border-right: none;
    border-left: 1px solid var(--border-color, #e5e7eb);
}

.GridLayoutFlow .GridMiddle {
    overflow: visible;
}

.GridLayoutFlow .GridScrollContainer {
    min-height: auto;
}

.GridLayoutFlow .GridContent {
    overflow: visible;
}

.GridLayoutFlow .GridFooter {
    grid-column: 1 / -1;
    margin-top: 1rem;
}

.AccordionLabel {
    display: flex;
    background: var(--surface);
    cursor: pointer;
    justify-content: space-between;
    padding: .5rem;
}

.AccordionLabel:hover {
    background: var(--surface);
}

.AccordionContent {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.35s ease-out, opacity 0.35s ease-out;
    opacity: 0;
}

.Dropdown {
    display: flex;
    flex-direction: row;
    gap: .5rem;
}

.Dropdown ul {
    list-style-type: none;
    padding-left: 0rem;
    margin: 0.2rem 0;
}

.DropdownHeader {
    color: var(--DropdownHeader-col);
    background: var(--DropdownHeader-bg);
    border: var(--DropdownHeader-border);
    padding: 0.3rem;
}

.DropdownItem {
    color: var(--DropdownItem-col);
    background: var(--DropdownItem-bg);
    border: var(--DropdownItem-border);
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    padding: 0.3rem;
    cursor: pointer;
}

.DropdownItem:hover {
    color: var(--DropdownItem-col-hover);
    background: var(--DropdownItem-bg-hover);
}

ul.DropdownNested {
    padding-left: 1rem;
    margin: 0.2rem 0;
}

.DropdownToggle {
    display: inline-flex;
    align-items: center;
    margin-left: 0.5rem;
    transition: transform 0.2s;
}

.DropdownToggle.open {
    transform: rotate(90deg);
}

.Progress {
    height: 20px;
    background: var(--surface);
    border-radius: 5px;
    overflow: hidden;
}

.ProgressFill {
    height: 100%;
    background: linear-gradient(90deg,
        var(--primary) 0%, 
        var(--secondary) 50%,
        var(--primary) 100%);
    transition: width 0.2s ease-in-out;
}

button,
.IconButton,
.MaterialButton,
.OutlinedButton,
.MaterialRoundButton,
.OutlinedRoundButton,
.Tag {
    display: inline-flex;
    gap: 0.5rem;
    padding: 0.625rem 1rem;
    font-size: 0.75rem;
    font-weight: 600;
    align-items: center;
    justify-content: center;
    color: var(--primary);
    background: var(--surface);
    border: 1px solid transparent;
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
    user-select: none;
    cursor: pointer;
}

button:hover,
.IconButton:hover,
.MaterialButton:hover,
.OutlinedButton:hover,
.MaterialRoundButton:hover,
.OutlinedRoundButton:hover {
    opacity: 0.9;
    background: var(--surface);
}

button:disabled,
.IconButton:disabled,
.MaterialButton:disabled,
.OutlinedButton:disabled,
.MaterialRoundButton:disabled,
.OutlinedRoundButton:disabled {
    color: var(--disabled);
    background: var(--disabled-container);
    cursor: not-allowed;
}

.IconButton {
    padding: .5rem;
    background: var(--icon-bg);
    border-radius: var(--icon-border-radius);
}

.IconButton:hover {
    background: var(--icon-hover-bg);
}

.MaterialButton,
.MaterialRoundButton {
    color: var(--mat-color);
    background: var(--mat-bg);
    border: var(--mat-border);
}

.MaterialButton:hover,
.MaterialRoundButton:hover {
    color: var(--mat-hover-color);
    background: var(--mat-hover-bg);
}

.OutlinedButton,
.OutlinedRoundButton {
    color: var(--out-color);
    background: var(--out-bg);
    border: var(--out-border);
}

.OutlinedButton:hover,
.OutlinedRoundButton:hover {
    color: var(--out-hover-color);
    background: var(--out-hover-bg);
}

.OutlinedRoundButton {
    border-radius: 2rem;
}

.MaterialRoundButton {
    border-radius: 2rem;
}

.GradientTag {
    background: linear-gradient(45deg, var(--primary-container), var(--secondary-container));
    border-radius: 2rem;
    padding: .3rem .5rem;
}

.ErrorButton {
    color: var(--error);
    background: var(--error-container);
}

fieldset {
    border: none;
}

fieldset div {
    display: flex;
    align-items: center;
}

input[type="checkbox"],
input[type="radio"] {
    accent-color: var(--input-accent-color, var(--primary));
    width: 1rem;
    height: 1rem;
    margin: .25rem;
}

input[type="checkbox"]:disabled,
input[type="radio"]:disabled {
    cursor: not-allowed;
}

select {
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    border-width: 1px;
    border-color: var(--primary-container);
    outline-style: none;
    font-size: 0.875rem;
    line-height: 1.25rem;
    color: var(--primary);
    background-color: var(--surface);
    appearance: none;
}

select:disabled {
    cursor: not-allowed;
    opacity: 0.75;
}

select:hover~.SelectChevron {
    transform: translateX(-150%) scale(1.2);
    transition: transform 0.15s ease;
}

.SelectChevron {
    transform: translateX(-150%);
    align-self: center;
    width: 1.25rem;
    height: 1.25rem;
    pointer-events: none;
    color: var(--primary);
}

.ToggleSwitch {
    width: 60px;
    height: 30px;
    background-color: var(--surface);
    border-radius: 15px;
    position: relative;
    cursor: pointer;
    transition: background-color 0.3s;
}

.ToggleThumb {
    width: 26px;
    height: 26px;
    background-color: var(--primary);
    border-radius: 50%;
    position: absolute;
    top: 2px;
    left: 2px;
    transition: transform 0.3s;
}

.ToggleChecked .ToggleThumb {
    transform: translateX(30px);
}

.ToggleChecked {
    background: var(--primary-container);
}

.Input {
    position: relative;
    background: var(--input-bg, var(--surface));
    border-bottom: 2px solid var(--primary-container);
}

.Input>input,
.Input>textarea {
    width: 100%;
    padding: .5rem;
    font-size: 0.875rem;
    color: var(--primary);
    background: transparent;
    border: none;
    outline: none;
    resize: vertical;
}

.Input> input:disabled,
.Input> textarea:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.Input> input:disabled ~ label,
.Input> textarea:disabled ~ label {
    opacity: 0.5;
}

.Input> input::placeholder,
.Input> textarea::placeholder {
    color: var(--primary);
}

.Input[data-has-label="true"] > input::placeholder,
.Input[data-has-label="true"] > textarea::placeholder {
    color: transparent;
}

.Input[data-has-icon="true"] > input ~ label,
.Input[data-has-icon="true"] > textarea ~ label {
    left: 3rem;
}

.Input> input:focus::placeholder,
.Input> textarea:focus::placeholder {
    color: var(--primary);
    transition: color 0.2s ease-out;
}

.Input label {
    position: absolute;
    top: 0rem;
    left: 1rem;
    color: var(--primary);
    border: var(--Input-label-border);
    font-size: 0.875rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    pointer-events: none;
    transition: all 0.2s ease-in-out;
    transform-origin: 0 0;
    align-self: anchor-center;
}

.Input:has([data-has-icon="false"]) label {
    display: none;
}

.Input:has(input[type="range"]) {
    margin: 0rem 1rem;
}

.Input> input:focus-within ~ label,
.Input> textarea:focus-within ~ label,
.Input> input:not(:placeholder-shown) ~ label,
.Input> textarea:not(:placeholder-shown) ~ label {
    transform: translateX(var(--label-transform-x))
            translateY(var(--label-transform-y))
            scale(var(--label-scale));
    top: 0rem;
    left: 0rem;
    height: auto;
    opacity: 1;
    color: var(--input-label-focus-color);
    background: var(--input-label-focus-bg);
    align-self: auto;
}

.InputIcon {
    pointer-events: none;
    padding-inline-start: 1rem;
}

.InputEnd {
    display: flex;
    gap: .25rem;
    justify-content: space-around;
    background: var(--input-bg, inherit);
    cursor: pointer;
}

.InputEnd:focus {
    outline: 2px solid transparent;
    outline-offset: 2px;
}

.ErrorTextInput {
    border-color: var(--error);
}

.ErrorText {
    font-size: 0.875rem;
    line-height: 1.25rem;
    color: var(--error);
}

input[type="range"] {
    padding: 0;
    -webkit-appearance: none;
    border-radius: 50%;
    cursor: pointer;
}

.Input[data-is-range="true"] {
    border-bottom: none;
}

input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    height: 1rem;
    width: 1rem;
    border-radius: 50%;
    background: none;
    cursor: pointer;
    margin-top: -0.25rem;
}

input[type="range"]::-webkit-slider-runnable-track {
    width: 100%;
    height: 0.5rem;
    border-radius: 0.25rem;
    background: linear-gradient(
        to right,
        var(--primary) 0%,
        var(--primary) var(--value-left, 0%),
        var(--primary-container) var(--value-left, 0%),
        var(--primary-container) 100%
    );
}

.RangeValue {
    position: absolute;
    left: var(--value-left, 0);
    transform: translateX(-50%);
    background: var(--secondary-container);
    color: var(--secondary);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    pointer-events: none;
    transition: opacity 0.2s;
}

input[type="range"]:hover ~ .RangeValue,
input[type="range"]:focus ~ .RangeValue {
    opacity: 1;
}

.UploadContainer {
    border: 2px dashed var(--primary);
    margin: 0.5rem;
    border-radius: 1rem;
    padding: 1rem;
    flex-direction: column;
    align-items: baseline;
    width: max-content;
}

.Dropzone {
    min-height: 250px;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    text-align: center;
    cursor: pointer;
}

.DropzoneDragging {
    background: var(--surface);
}

.ImagePreview {
    height: auto;
    flex-shrink: 0;
    display: block;
    margin: 0 auto;
}

.ImagePreviewInvalid {
    filter: blur(8px);
}

.InvalidMessage {
    position: absolute;
    color: var(--surface);
    background: var(--primary);
    padding: 0.5rem;
    border-radius: 0.25rem;
}

.HiddenInput {
    display: none;
}
